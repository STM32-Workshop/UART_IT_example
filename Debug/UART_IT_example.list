
UART_IT_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002be8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002cf4  08002cf4  00012cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d5c  08002d5c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002d5c  08002d5c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d5c  08002d5c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d5c  08002d5c  00012d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000074  08002dd8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08002dd8  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078f3  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015d6  00000000  00000000  00027990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  00028f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  00029620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e2d  00000000  00000000  00029c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008398  00000000  00000000  00040a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082591  00000000  00000000  00048e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb3a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dec  00000000  00000000  000cb3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cdc 	.word	0x08002cdc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002cdc 	.word	0x08002cdc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa82 	bl	8000658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81c 	bl	8000190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8aa 	bl	80002b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f854 	bl	8000208 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f87c 	bl	800025c <MX_USART2_UART_Init>
    /* USER CODE BEGIN 3 */

	  // Начало пояснений в разделе "USER CODE BEGIN PV"

	  // Запускаем прием на UART2, чтобы быть готовым ловить посылку с UART1
	  HAL_UART_Receive_IT(&huart2, &uart2_rx_var, 1);
 8000164:	2201      	movs	r2, #1
 8000166:	4906      	ldr	r1, [pc, #24]	; (8000180 <main+0x34>)
 8000168:	4806      	ldr	r0, [pc, #24]	; (8000184 <main+0x38>)
 800016a:	f001 fb6f 	bl	800184c <HAL_UART_Receive_IT>

	  // Передаем нашу переменную на UART2
	  // Дальнейшие действия описаны в области "USER CODE BEGIN 4", они
	  // связаны с обработкой прерываний
	  HAL_UART_Transmit_IT(&huart1, &uart1_tx_var, 1);
 800016e:	2201      	movs	r2, #1
 8000170:	4905      	ldr	r1, [pc, #20]	; (8000188 <main+0x3c>)
 8000172:	4806      	ldr	r0, [pc, #24]	; (800018c <main+0x40>)
 8000174:	f001 fb35 	bl	80017e2 <HAL_UART_Transmit_IT>

	  HAL_Delay(200);
 8000178:	20c8      	movs	r0, #200	; 0xc8
 800017a:	f000 facf 	bl	800071c <HAL_Delay>
	  HAL_UART_Receive_IT(&huart2, &uart2_rx_var, 1);
 800017e:	e7f1      	b.n	8000164 <main+0x18>
 8000180:	20000120 	.word	0x20000120
 8000184:	200000d8 	.word	0x200000d8
 8000188:	20000000 	.word	0x20000000
 800018c:	20000090 	.word	0x20000090

08000190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b090      	sub	sp, #64	; 0x40
 8000194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000196:	f107 0318 	add.w	r3, r7, #24
 800019a:	2228      	movs	r2, #40	; 0x28
 800019c:	2100      	movs	r1, #0
 800019e:	4618      	mov	r0, r3
 80001a0:	f002 f91a 	bl	80023d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	605a      	str	r2, [r3, #4]
 80001ac:	609a      	str	r2, [r3, #8]
 80001ae:	60da      	str	r2, [r3, #12]
 80001b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b2:	2302      	movs	r3, #2
 80001b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b6:	2301      	movs	r3, #1
 80001b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ba:	2310      	movs	r3, #16
 80001bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001be:	2300      	movs	r3, #0
 80001c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c2:	f107 0318 	add.w	r3, r7, #24
 80001c6:	4618      	mov	r0, r3
 80001c8:	f000 fe28 	bl	8000e1c <HAL_RCC_OscConfig>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d001      	beq.n	80001d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001d2:	f000 f8e7 	bl	80003a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d6:	230f      	movs	r3, #15
 80001d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001da:	2300      	movs	r3, #0
 80001dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001e2:	2300      	movs	r3, #0
 80001e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f001 f896 	bl	8001320 <HAL_RCC_ClockConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001fa:	f000 f8d3 	bl	80003a4 <Error_Handler>
  }
}
 80001fe:	bf00      	nop
 8000200:	3740      	adds	r7, #64	; 0x40
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
	...

08000208 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800020c:	4b11      	ldr	r3, [pc, #68]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 800020e:	4a12      	ldr	r2, [pc, #72]	; (8000258 <MX_USART1_UART_Init+0x50>)
 8000210:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000212:	4b10      	ldr	r3, [pc, #64]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 8000214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000218:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800021a:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 800021c:	2200      	movs	r2, #0
 800021e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 8000222:	2200      	movs	r2, #0
 8000224:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000226:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 8000228:	2200      	movs	r2, #0
 800022a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800022c:	4b09      	ldr	r3, [pc, #36]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 800022e:	220c      	movs	r2, #12
 8000230:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 8000234:	2200      	movs	r2, #0
 8000236:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 800023a:	2200      	movs	r2, #0
 800023c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800023e:	4805      	ldr	r0, [pc, #20]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 8000240:	f001 f9fc 	bl	800163c <HAL_UART_Init>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800024a:	f000 f8ab 	bl	80003a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000090 	.word	0x20000090
 8000258:	40013800 	.word	0x40013800

0800025c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000260:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000262:	4a12      	ldr	r2, [pc, #72]	; (80002ac <MX_USART2_UART_Init+0x50>)
 8000264:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000266:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000268:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800026c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000270:	2200      	movs	r2, #0
 8000272:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000276:	2200      	movs	r2, #0
 8000278:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800027a:	4b0b      	ldr	r3, [pc, #44]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 800027c:	2200      	movs	r2, #0
 800027e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000280:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000282:	220c      	movs	r2, #12
 8000284:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000286:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000288:	2200      	movs	r2, #0
 800028a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 800028e:	2200      	movs	r2, #0
 8000290:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000292:	4805      	ldr	r0, [pc, #20]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000294:	f001 f9d2 	bl	800163c <HAL_UART_Init>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800029e:	f000 f881 	bl	80003a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	200000d8 	.word	0x200000d8
 80002ac:	40004400 	.word	0x40004400

080002b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c4:	4b1e      	ldr	r3, [pc, #120]	; (8000340 <MX_GPIO_Init+0x90>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a1d      	ldr	r2, [pc, #116]	; (8000340 <MX_GPIO_Init+0x90>)
 80002ca:	f043 0310 	orr.w	r3, r3, #16
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <MX_GPIO_Init+0x90>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0310 	and.w	r3, r3, #16
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002dc:	4b18      	ldr	r3, [pc, #96]	; (8000340 <MX_GPIO_Init+0x90>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a17      	ldr	r2, [pc, #92]	; (8000340 <MX_GPIO_Init+0x90>)
 80002e2:	f043 0320 	orr.w	r3, r3, #32
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b15      	ldr	r3, [pc, #84]	; (8000340 <MX_GPIO_Init+0x90>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0320 	and.w	r3, r3, #32
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f4:	4b12      	ldr	r3, [pc, #72]	; (8000340 <MX_GPIO_Init+0x90>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a11      	ldr	r2, [pc, #68]	; (8000340 <MX_GPIO_Init+0x90>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <MX_GPIO_Init+0x90>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0304 	and.w	r3, r3, #4
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000312:	480c      	ldr	r0, [pc, #48]	; (8000344 <MX_GPIO_Init+0x94>)
 8000314:	f000 fd6a 	bl	8000dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031e:	2301      	movs	r3, #1
 8000320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	2302      	movs	r3, #2
 8000328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	4619      	mov	r1, r3
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <MX_GPIO_Init+0x94>)
 8000332:	f000 fbd7 	bl	8000ae4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000336:	bf00      	nop
 8000338:	3720      	adds	r7, #32
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40021000 	.word	0x40021000
 8000344:	40011000 	.word	0x40011000

08000348 <HAL_UART_TxCpltCallback>:
 *
 * Он должен быть пустым (тут ничего кроме светодиода), просто, чтобы было видно, что CallBack'и
 * можго обрабатывать разные для одной и той же периферии, в зависимости от
 * требуемого события
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]

}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
	...

0800035c <HAL_UART_RxCpltCallback>:

/*
 * CallBack по окончанию приема посылки через UART
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a09      	ldr	r2, [pc, #36]	; (8000390 <HAL_UART_RxCpltCallback+0x34>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d10c      	bne.n	8000388 <HAL_UART_RxCpltCallback+0x2c>
		 * остальным кодом, подключение можете увидеть в самом верху этого фала, строчка выглядит так:
		 *     #include <stdio.h>
		 * о работе функции можно узнать загуглив её название.
		 */

		sprintf((char *)uart2_tx_buff, "%d\r\n", uart2_rx_var);
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <HAL_UART_RxCpltCallback+0x38>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	461a      	mov	r2, r3
 8000374:	4908      	ldr	r1, [pc, #32]	; (8000398 <HAL_UART_RxCpltCallback+0x3c>)
 8000376:	4809      	ldr	r0, [pc, #36]	; (800039c <HAL_UART_RxCpltCallback+0x40>)
 8000378:	f002 f836 	bl	80023e8 <siprintf>

		/*
		 * После того, как было произведено преобразование можем передать нашу переменную
		 */

		HAL_UART_Transmit(&huart2, uart2_tx_buff, 5, 100);
 800037c:	2364      	movs	r3, #100	; 0x64
 800037e:	2205      	movs	r2, #5
 8000380:	4906      	ldr	r1, [pc, #24]	; (800039c <HAL_UART_RxCpltCallback+0x40>)
 8000382:	4807      	ldr	r0, [pc, #28]	; (80003a0 <HAL_UART_RxCpltCallback+0x44>)
 8000384:	f001 f9aa 	bl	80016dc <HAL_UART_Transmit>
	}
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40004400 	.word	0x40004400
 8000394:	20000120 	.word	0x20000120
 8000398:	08002cf4 	.word	0x08002cf4
 800039c:	20000124 	.word	0x20000124
 80003a0:	200000d8 	.word	0x200000d8

080003a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ac:	e7fe      	b.n	80003ac <Error_Handler+0x8>
	...

080003b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003b6:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <HAL_MspInit+0x40>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a0d      	ldr	r2, [pc, #52]	; (80003f0 <HAL_MspInit+0x40>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <HAL_MspInit+0x40>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <HAL_MspInit+0x40>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a07      	ldr	r2, [pc, #28]	; (80003f0 <HAL_MspInit+0x40>)
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <HAL_MspInit+0x40>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e2:	603b      	str	r3, [r7, #0]
 80003e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr
 80003f0:	40021000 	.word	0x40021000

080003f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b08a      	sub	sp, #40	; 0x28
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fc:	f107 0318 	add.w	r3, r7, #24
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a3f      	ldr	r2, [pc, #252]	; (800050c <HAL_UART_MspInit+0x118>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d13a      	bne.n	800048a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000414:	4b3e      	ldr	r3, [pc, #248]	; (8000510 <HAL_UART_MspInit+0x11c>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a3d      	ldr	r2, [pc, #244]	; (8000510 <HAL_UART_MspInit+0x11c>)
 800041a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b3b      	ldr	r3, [pc, #236]	; (8000510 <HAL_UART_MspInit+0x11c>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800042c:	4b38      	ldr	r3, [pc, #224]	; (8000510 <HAL_UART_MspInit+0x11c>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a37      	ldr	r2, [pc, #220]	; (8000510 <HAL_UART_MspInit+0x11c>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b35      	ldr	r3, [pc, #212]	; (8000510 <HAL_UART_MspInit+0x11c>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0304 	and.w	r3, r3, #4
 8000440:	613b      	str	r3, [r7, #16]
 8000442:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800044a:	2302      	movs	r3, #2
 800044c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800044e:	2303      	movs	r3, #3
 8000450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000452:	f107 0318 	add.w	r3, r7, #24
 8000456:	4619      	mov	r1, r3
 8000458:	482e      	ldr	r0, [pc, #184]	; (8000514 <HAL_UART_MspInit+0x120>)
 800045a:	f000 fb43 	bl	8000ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800045e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046c:	f107 0318 	add.w	r3, r7, #24
 8000470:	4619      	mov	r1, r3
 8000472:	4828      	ldr	r0, [pc, #160]	; (8000514 <HAL_UART_MspInit+0x120>)
 8000474:	f000 fb36 	bl	8000ae4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000478:	2200      	movs	r2, #0
 800047a:	2100      	movs	r1, #0
 800047c:	2025      	movs	r0, #37	; 0x25
 800047e:	f000 fa48 	bl	8000912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000482:	2025      	movs	r0, #37	; 0x25
 8000484:	f000 fa61 	bl	800094a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000488:	e03c      	b.n	8000504 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a22      	ldr	r2, [pc, #136]	; (8000518 <HAL_UART_MspInit+0x124>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d137      	bne.n	8000504 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000494:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <HAL_UART_MspInit+0x11c>)
 8000496:	69db      	ldr	r3, [r3, #28]
 8000498:	4a1d      	ldr	r2, [pc, #116]	; (8000510 <HAL_UART_MspInit+0x11c>)
 800049a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800049e:	61d3      	str	r3, [r2, #28]
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <HAL_UART_MspInit+0x11c>)
 80004a2:	69db      	ldr	r3, [r3, #28]
 80004a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ac:	4b18      	ldr	r3, [pc, #96]	; (8000510 <HAL_UART_MspInit+0x11c>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a17      	ldr	r2, [pc, #92]	; (8000510 <HAL_UART_MspInit+0x11c>)
 80004b2:	f043 0304 	orr.w	r3, r3, #4
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b15      	ldr	r3, [pc, #84]	; (8000510 <HAL_UART_MspInit+0x11c>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0304 	and.w	r3, r3, #4
 80004c0:	60bb      	str	r3, [r7, #8]
 80004c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004c4:	2304      	movs	r3, #4
 80004c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c8:	2302      	movs	r3, #2
 80004ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004cc:	2303      	movs	r3, #3
 80004ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	f107 0318 	add.w	r3, r7, #24
 80004d4:	4619      	mov	r1, r3
 80004d6:	480f      	ldr	r0, [pc, #60]	; (8000514 <HAL_UART_MspInit+0x120>)
 80004d8:	f000 fb04 	bl	8000ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004dc:	2308      	movs	r3, #8
 80004de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e0:	2300      	movs	r3, #0
 80004e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	f107 0318 	add.w	r3, r7, #24
 80004ec:	4619      	mov	r1, r3
 80004ee:	4809      	ldr	r0, [pc, #36]	; (8000514 <HAL_UART_MspInit+0x120>)
 80004f0:	f000 faf8 	bl	8000ae4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2100      	movs	r1, #0
 80004f8:	2026      	movs	r0, #38	; 0x26
 80004fa:	f000 fa0a 	bl	8000912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004fe:	2026      	movs	r0, #38	; 0x26
 8000500:	f000 fa23 	bl	800094a <HAL_NVIC_EnableIRQ>
}
 8000504:	bf00      	nop
 8000506:	3728      	adds	r7, #40	; 0x28
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40013800 	.word	0x40013800
 8000510:	40021000 	.word	0x40021000
 8000514:	40010800 	.word	0x40010800
 8000518:	40004400 	.word	0x40004400

0800051c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <NMI_Handler+0x4>

08000522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <HardFault_Handler+0x4>

08000528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <MemManage_Handler+0x4>

0800052e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <BusFault_Handler+0x4>

08000534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <UsageFault_Handler+0x4>

0800053a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000562:	f000 f8bf 	bl	80006e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000570:	4802      	ldr	r0, [pc, #8]	; (800057c <USART1_IRQHandler+0x10>)
 8000572:	f001 f991 	bl	8001898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000090 	.word	0x20000090

08000580 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <USART2_IRQHandler+0x10>)
 8000586:	f001 f987 	bl	8001898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	200000d8 	.word	0x200000d8

08000594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800059c:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <_sbrk+0x5c>)
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <_sbrk+0x60>)
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a8:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <_sbrk+0x64>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d102      	bne.n	80005b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005b0:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <_sbrk+0x64>)
 80005b2:	4a12      	ldr	r2, [pc, #72]	; (80005fc <_sbrk+0x68>)
 80005b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <_sbrk+0x64>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	693a      	ldr	r2, [r7, #16]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d207      	bcs.n	80005d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005c4:	f001 fede 	bl	8002384 <__errno>
 80005c8:	4603      	mov	r3, r0
 80005ca:	220c      	movs	r2, #12
 80005cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	e009      	b.n	80005e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <_sbrk+0x64>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005da:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <_sbrk+0x64>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <_sbrk+0x64>)
 80005e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005e6:	68fb      	ldr	r3, [r7, #12]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20005000 	.word	0x20005000
 80005f4:	00000400 	.word	0x00000400
 80005f8:	2000012c 	.word	0x2000012c
 80005fc:	20000148 	.word	0x20000148

08000600 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800060c:	f7ff fff8 	bl	8000600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480b      	ldr	r0, [pc, #44]	; (8000640 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000612:	490c      	ldr	r1, [pc, #48]	; (8000644 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000614:	4a0c      	ldr	r2, [pc, #48]	; (8000648 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a09      	ldr	r2, [pc, #36]	; (800064c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000628:	4c09      	ldr	r4, [pc, #36]	; (8000650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000636:	f001 feab 	bl	8002390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff fd87 	bl	800014c <main>
  bx lr
 800063e:	4770      	bx	lr
  ldr r0, =_sdata
 8000640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000644:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000648:	08002d64 	.word	0x08002d64
  ldr r2, =_sbss
 800064c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000650:	20000144 	.word	0x20000144

08000654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC1_2_IRQHandler>
	...

08000658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <HAL_Init+0x28>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_Init+0x28>)
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000668:	2003      	movs	r0, #3
 800066a:	f000 f947 	bl	80008fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066e:	200f      	movs	r0, #15
 8000670:	f000 f808 	bl	8000684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000674:	f7ff fe9c 	bl	80003b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40022000 	.word	0x40022000

08000684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x54>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_InitTick+0x58>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	fbb3 f3f1 	udiv	r3, r3, r1
 800069e:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f95f 	bl	8000966 <HAL_SYSTICK_Config>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	e00e      	b.n	80006d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b0f      	cmp	r3, #15
 80006b6:	d80a      	bhi.n	80006ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b8:	2200      	movs	r2, #0
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	f04f 30ff 	mov.w	r0, #4294967295
 80006c0:	f000 f927 	bl	8000912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c4:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <HAL_InitTick+0x5c>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e000      	b.n	80006d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000004 	.word	0x20000004
 80006dc:	2000000c 	.word	0x2000000c
 80006e0:	20000008 	.word	0x20000008

080006e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_IncTick+0x1c>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <HAL_IncTick+0x20>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	4a03      	ldr	r2, [pc, #12]	; (8000704 <HAL_IncTick+0x20>)
 80006f6:	6013      	str	r3, [r2, #0]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	2000000c 	.word	0x2000000c
 8000704:	20000130 	.word	0x20000130

08000708 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return uwTick;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <HAL_GetTick+0x10>)
 800070e:	681b      	ldr	r3, [r3, #0]
}
 8000710:	4618      	mov	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	20000130 	.word	0x20000130

0800071c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000724:	f7ff fff0 	bl	8000708 <HAL_GetTick>
 8000728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000734:	d005      	beq.n	8000742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <HAL_Delay+0x44>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	461a      	mov	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	4413      	add	r3, r2
 8000740:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000742:	bf00      	nop
 8000744:	f7ff ffe0 	bl	8000708 <HAL_GetTick>
 8000748:	4602      	mov	r2, r0
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	429a      	cmp	r2, r3
 8000752:	d8f7      	bhi.n	8000744 <HAL_Delay+0x28>
  {
  }
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000000c 	.word	0x2000000c

08000764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800078c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000796:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	60d3      	str	r3, [r2, #12]
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <__NVIC_GetPriorityGrouping+0x18>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	f003 0307 	and.w	r3, r3, #7
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	db0b      	blt.n	80007f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f003 021f 	and.w	r2, r3, #31
 80007e0:	4906      	ldr	r1, [pc, #24]	; (80007fc <__NVIC_EnableIRQ+0x34>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	2001      	movs	r0, #1
 80007ea:	fa00 f202 	lsl.w	r2, r0, r2
 80007ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	e000e100 	.word	0xe000e100

08000800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	db0a      	blt.n	800082a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	490c      	ldr	r1, [pc, #48]	; (800084c <__NVIC_SetPriority+0x4c>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	0112      	lsls	r2, r2, #4
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	440b      	add	r3, r1
 8000824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000828:	e00a      	b.n	8000840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4908      	ldr	r1, [pc, #32]	; (8000850 <__NVIC_SetPriority+0x50>)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	3b04      	subs	r3, #4
 8000838:	0112      	lsls	r2, r2, #4
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	440b      	add	r3, r1
 800083e:	761a      	strb	r2, [r3, #24]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000e100 	.word	0xe000e100
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	f1c3 0307 	rsb	r3, r3, #7
 800086e:	2b04      	cmp	r3, #4
 8000870:	bf28      	it	cs
 8000872:	2304      	movcs	r3, #4
 8000874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3304      	adds	r3, #4
 800087a:	2b06      	cmp	r3, #6
 800087c:	d902      	bls.n	8000884 <NVIC_EncodePriority+0x30>
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3b03      	subs	r3, #3
 8000882:	e000      	b.n	8000886 <NVIC_EncodePriority+0x32>
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000888:	f04f 32ff 	mov.w	r2, #4294967295
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43da      	mvns	r2, r3
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	401a      	ands	r2, r3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800089c:	f04f 31ff 	mov.w	r1, #4294967295
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	43d9      	mvns	r1, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	4313      	orrs	r3, r2
         );
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3724      	adds	r7, #36	; 0x24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008c8:	d301      	bcc.n	80008ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ca:	2301      	movs	r3, #1
 80008cc:	e00f      	b.n	80008ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <SysTick_Config+0x40>)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d6:	210f      	movs	r1, #15
 80008d8:	f04f 30ff 	mov.w	r0, #4294967295
 80008dc:	f7ff ff90 	bl	8000800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <SysTick_Config+0x40>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e6:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <SysTick_Config+0x40>)
 80008e8:	2207      	movs	r2, #7
 80008ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	e000e010 	.word	0xe000e010

080008fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ff2d 	bl	8000764 <__NVIC_SetPriorityGrouping>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
 800091e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000924:	f7ff ff42 	bl	80007ac <__NVIC_GetPriorityGrouping>
 8000928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	68b9      	ldr	r1, [r7, #8]
 800092e:	6978      	ldr	r0, [r7, #20]
 8000930:	f7ff ff90 	bl	8000854 <NVIC_EncodePriority>
 8000934:	4602      	mov	r2, r0
 8000936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093a:	4611      	mov	r1, r2
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff5f 	bl	8000800 <__NVIC_SetPriority>
}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff35 	bl	80007c8 <__NVIC_EnableIRQ>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ffa2 	bl	80008b8 <SysTick_Config>
 8000974:	4603      	mov	r3, r0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800097e:	b480      	push	{r7}
 8000980:	b085      	sub	sp, #20
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000986:	2300      	movs	r3, #0
 8000988:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b02      	cmp	r3, #2
 8000994:	d008      	beq.n	80009a8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2204      	movs	r2, #4
 800099a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	e020      	b.n	80009ea <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f022 020e 	bic.w	r2, r2, #14
 80009b6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f022 0201 	bic.w	r2, r2, #1
 80009c6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009d0:	2101      	movs	r1, #1
 80009d2:	fa01 f202 	lsl.w	r2, r1, r2
 80009d6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2201      	movs	r2, #1
 80009dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009fc:	2300      	movs	r3, #0
 80009fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d005      	beq.n	8000a18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2204      	movs	r2, #4
 8000a10:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	73fb      	strb	r3, [r7, #15]
 8000a16:	e051      	b.n	8000abc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f022 020e 	bic.w	r2, r2, #14
 8000a26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f022 0201 	bic.w	r2, r2, #1
 8000a36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a22      	ldr	r2, [pc, #136]	; (8000ac8 <HAL_DMA_Abort_IT+0xd4>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d029      	beq.n	8000a96 <HAL_DMA_Abort_IT+0xa2>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a21      	ldr	r2, [pc, #132]	; (8000acc <HAL_DMA_Abort_IT+0xd8>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d022      	beq.n	8000a92 <HAL_DMA_Abort_IT+0x9e>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a1f      	ldr	r2, [pc, #124]	; (8000ad0 <HAL_DMA_Abort_IT+0xdc>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d01a      	beq.n	8000a8c <HAL_DMA_Abort_IT+0x98>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <HAL_DMA_Abort_IT+0xe0>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d012      	beq.n	8000a86 <HAL_DMA_Abort_IT+0x92>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <HAL_DMA_Abort_IT+0xe4>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d00a      	beq.n	8000a80 <HAL_DMA_Abort_IT+0x8c>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a1b      	ldr	r2, [pc, #108]	; (8000adc <HAL_DMA_Abort_IT+0xe8>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d102      	bne.n	8000a7a <HAL_DMA_Abort_IT+0x86>
 8000a74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a78:	e00e      	b.n	8000a98 <HAL_DMA_Abort_IT+0xa4>
 8000a7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a7e:	e00b      	b.n	8000a98 <HAL_DMA_Abort_IT+0xa4>
 8000a80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a84:	e008      	b.n	8000a98 <HAL_DMA_Abort_IT+0xa4>
 8000a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8a:	e005      	b.n	8000a98 <HAL_DMA_Abort_IT+0xa4>
 8000a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a90:	e002      	b.n	8000a98 <HAL_DMA_Abort_IT+0xa4>
 8000a92:	2310      	movs	r3, #16
 8000a94:	e000      	b.n	8000a98 <HAL_DMA_Abort_IT+0xa4>
 8000a96:	2301      	movs	r3, #1
 8000a98:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <HAL_DMA_Abort_IT+0xec>)
 8000a9a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	4798      	blx	r3
    } 
  }
  return status;
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40020008 	.word	0x40020008
 8000acc:	4002001c 	.word	0x4002001c
 8000ad0:	40020030 	.word	0x40020030
 8000ad4:	40020044 	.word	0x40020044
 8000ad8:	40020058 	.word	0x40020058
 8000adc:	4002006c 	.word	0x4002006c
 8000ae0:	40020000 	.word	0x40020000

08000ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b08b      	sub	sp, #44	; 0x2c
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af6:	e169      	b.n	8000dcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000af8:	2201      	movs	r2, #1
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	69fa      	ldr	r2, [r7, #28]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	f040 8158 	bne.w	8000dc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	4a9a      	ldr	r2, [pc, #616]	; (8000d84 <HAL_GPIO_Init+0x2a0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d05e      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b20:	4a98      	ldr	r2, [pc, #608]	; (8000d84 <HAL_GPIO_Init+0x2a0>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d875      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b26:	4a98      	ldr	r2, [pc, #608]	; (8000d88 <HAL_GPIO_Init+0x2a4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d058      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b2c:	4a96      	ldr	r2, [pc, #600]	; (8000d88 <HAL_GPIO_Init+0x2a4>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d86f      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b32:	4a96      	ldr	r2, [pc, #600]	; (8000d8c <HAL_GPIO_Init+0x2a8>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d052      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b38:	4a94      	ldr	r2, [pc, #592]	; (8000d8c <HAL_GPIO_Init+0x2a8>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d869      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b3e:	4a94      	ldr	r2, [pc, #592]	; (8000d90 <HAL_GPIO_Init+0x2ac>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d04c      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b44:	4a92      	ldr	r2, [pc, #584]	; (8000d90 <HAL_GPIO_Init+0x2ac>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d863      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b4a:	4a92      	ldr	r2, [pc, #584]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d046      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b50:	4a90      	ldr	r2, [pc, #576]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d85d      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b56:	2b12      	cmp	r3, #18
 8000b58:	d82a      	bhi.n	8000bb0 <HAL_GPIO_Init+0xcc>
 8000b5a:	2b12      	cmp	r3, #18
 8000b5c:	d859      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b5e:	a201      	add	r2, pc, #4	; (adr r2, 8000b64 <HAL_GPIO_Init+0x80>)
 8000b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b64:	08000bdf 	.word	0x08000bdf
 8000b68:	08000bb9 	.word	0x08000bb9
 8000b6c:	08000bcb 	.word	0x08000bcb
 8000b70:	08000c0d 	.word	0x08000c0d
 8000b74:	08000c13 	.word	0x08000c13
 8000b78:	08000c13 	.word	0x08000c13
 8000b7c:	08000c13 	.word	0x08000c13
 8000b80:	08000c13 	.word	0x08000c13
 8000b84:	08000c13 	.word	0x08000c13
 8000b88:	08000c13 	.word	0x08000c13
 8000b8c:	08000c13 	.word	0x08000c13
 8000b90:	08000c13 	.word	0x08000c13
 8000b94:	08000c13 	.word	0x08000c13
 8000b98:	08000c13 	.word	0x08000c13
 8000b9c:	08000c13 	.word	0x08000c13
 8000ba0:	08000c13 	.word	0x08000c13
 8000ba4:	08000c13 	.word	0x08000c13
 8000ba8:	08000bc1 	.word	0x08000bc1
 8000bac:	08000bd5 	.word	0x08000bd5
 8000bb0:	4a79      	ldr	r2, [pc, #484]	; (8000d98 <HAL_GPIO_Init+0x2b4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d013      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bb6:	e02c      	b.n	8000c12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	623b      	str	r3, [r7, #32]
          break;
 8000bbe:	e029      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	623b      	str	r3, [r7, #32]
          break;
 8000bc8:	e024      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	3308      	adds	r3, #8
 8000bd0:	623b      	str	r3, [r7, #32]
          break;
 8000bd2:	e01f      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	330c      	adds	r3, #12
 8000bda:	623b      	str	r3, [r7, #32]
          break;
 8000bdc:	e01a      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000be6:	2304      	movs	r3, #4
 8000be8:	623b      	str	r3, [r7, #32]
          break;
 8000bea:	e013      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d105      	bne.n	8000c00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69fa      	ldr	r2, [r7, #28]
 8000bfc:	611a      	str	r2, [r3, #16]
          break;
 8000bfe:	e009      	b.n	8000c14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c00:	2308      	movs	r3, #8
 8000c02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69fa      	ldr	r2, [r7, #28]
 8000c08:	615a      	str	r2, [r3, #20]
          break;
 8000c0a:	e003      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
          break;
 8000c10:	e000      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          break;
 8000c12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	2bff      	cmp	r3, #255	; 0xff
 8000c18:	d801      	bhi.n	8000c1e <HAL_GPIO_Init+0x13a>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	e001      	b.n	8000c22 <HAL_GPIO_Init+0x13e>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3304      	adds	r3, #4
 8000c22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	2bff      	cmp	r3, #255	; 0xff
 8000c28:	d802      	bhi.n	8000c30 <HAL_GPIO_Init+0x14c>
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	e002      	b.n	8000c36 <HAL_GPIO_Init+0x152>
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	3b08      	subs	r3, #8
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	210f      	movs	r1, #15
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	401a      	ands	r2, r3
 8000c48:	6a39      	ldr	r1, [r7, #32]
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	431a      	orrs	r2, r3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 80b1 	beq.w	8000dc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c64:	4b4d      	ldr	r3, [pc, #308]	; (8000d9c <HAL_GPIO_Init+0x2b8>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a4c      	ldr	r2, [pc, #304]	; (8000d9c <HAL_GPIO_Init+0x2b8>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b4a      	ldr	r3, [pc, #296]	; (8000d9c <HAL_GPIO_Init+0x2b8>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c7c:	4a48      	ldr	r2, [pc, #288]	; (8000da0 <HAL_GPIO_Init+0x2bc>)
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	089b      	lsrs	r3, r3, #2
 8000c82:	3302      	adds	r3, #2
 8000c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	220f      	movs	r2, #15
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a40      	ldr	r2, [pc, #256]	; (8000da4 <HAL_GPIO_Init+0x2c0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d013      	beq.n	8000cd0 <HAL_GPIO_Init+0x1ec>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a3f      	ldr	r2, [pc, #252]	; (8000da8 <HAL_GPIO_Init+0x2c4>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d00d      	beq.n	8000ccc <HAL_GPIO_Init+0x1e8>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a3e      	ldr	r2, [pc, #248]	; (8000dac <HAL_GPIO_Init+0x2c8>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d007      	beq.n	8000cc8 <HAL_GPIO_Init+0x1e4>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a3d      	ldr	r2, [pc, #244]	; (8000db0 <HAL_GPIO_Init+0x2cc>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d101      	bne.n	8000cc4 <HAL_GPIO_Init+0x1e0>
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	e006      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	e004      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000cc8:	2302      	movs	r3, #2
 8000cca:	e002      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e000      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd4:	f002 0203 	and.w	r2, r2, #3
 8000cd8:	0092      	lsls	r2, r2, #2
 8000cda:	4093      	lsls	r3, r2
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ce2:	492f      	ldr	r1, [pc, #188]	; (8000da0 <HAL_GPIO_Init+0x2bc>)
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	3302      	adds	r3, #2
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d006      	beq.n	8000d0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cfc:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	492c      	ldr	r1, [pc, #176]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	608b      	str	r3, [r1, #8]
 8000d08:	e006      	b.n	8000d18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	43db      	mvns	r3, r3
 8000d12:	4928      	ldr	r1, [pc, #160]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d14:	4013      	ands	r3, r2
 8000d16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d006      	beq.n	8000d32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	4922      	ldr	r1, [pc, #136]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	60cb      	str	r3, [r1, #12]
 8000d30:	e006      	b.n	8000d40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	491e      	ldr	r1, [pc, #120]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d006      	beq.n	8000d5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	4918      	ldr	r1, [pc, #96]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	604b      	str	r3, [r1, #4]
 8000d58:	e006      	b.n	8000d68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	4914      	ldr	r1, [pc, #80]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d021      	beq.n	8000db8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	490e      	ldr	r1, [pc, #56]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	600b      	str	r3, [r1, #0]
 8000d80:	e021      	b.n	8000dc6 <HAL_GPIO_Init+0x2e2>
 8000d82:	bf00      	nop
 8000d84:	10320000 	.word	0x10320000
 8000d88:	10310000 	.word	0x10310000
 8000d8c:	10220000 	.word	0x10220000
 8000d90:	10210000 	.word	0x10210000
 8000d94:	10120000 	.word	0x10120000
 8000d98:	10110000 	.word	0x10110000
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010000 	.word	0x40010000
 8000da4:	40010800 	.word	0x40010800
 8000da8:	40010c00 	.word	0x40010c00
 8000dac:	40011000 	.word	0x40011000
 8000db0:	40011400 	.word	0x40011400
 8000db4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_GPIO_Init+0x304>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	4909      	ldr	r1, [pc, #36]	; (8000de8 <HAL_GPIO_Init+0x304>)
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	3301      	adds	r3, #1
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f47f ae8e 	bne.w	8000af8 <HAL_GPIO_Init+0x14>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	372c      	adds	r7, #44	; 0x2c
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	40010400 	.word	0x40010400

08000dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	807b      	strh	r3, [r7, #2]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dfc:	787b      	ldrb	r3, [r7, #1]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e02:	887a      	ldrh	r2, [r7, #2]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e08:	e003      	b.n	8000e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e0a:	887b      	ldrh	r3, [r7, #2]
 8000e0c:	041a      	lsls	r2, r3, #16
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	611a      	str	r2, [r3, #16]
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e272      	b.n	8001314 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 8087 	beq.w	8000f4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e3c:	4b92      	ldr	r3, [pc, #584]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 030c 	and.w	r3, r3, #12
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d00c      	beq.n	8000e62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e48:	4b8f      	ldr	r3, [pc, #572]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 030c 	and.w	r3, r3, #12
 8000e50:	2b08      	cmp	r3, #8
 8000e52:	d112      	bne.n	8000e7a <HAL_RCC_OscConfig+0x5e>
 8000e54:	4b8c      	ldr	r3, [pc, #560]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e60:	d10b      	bne.n	8000e7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e62:	4b89      	ldr	r3, [pc, #548]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d06c      	beq.n	8000f48 <HAL_RCC_OscConfig+0x12c>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d168      	bne.n	8000f48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e24c      	b.n	8001314 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e82:	d106      	bne.n	8000e92 <HAL_RCC_OscConfig+0x76>
 8000e84:	4b80      	ldr	r3, [pc, #512]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a7f      	ldr	r2, [pc, #508]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	e02e      	b.n	8000ef0 <HAL_RCC_OscConfig+0xd4>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10c      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x98>
 8000e9a:	4b7b      	ldr	r3, [pc, #492]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a7a      	ldr	r2, [pc, #488]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	4b78      	ldr	r3, [pc, #480]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a77      	ldr	r2, [pc, #476]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e01d      	b.n	8000ef0 <HAL_RCC_OscConfig+0xd4>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ebc:	d10c      	bne.n	8000ed8 <HAL_RCC_OscConfig+0xbc>
 8000ebe:	4b72      	ldr	r3, [pc, #456]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a71      	ldr	r2, [pc, #452]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	4b6f      	ldr	r3, [pc, #444]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a6e      	ldr	r2, [pc, #440]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	e00b      	b.n	8000ef0 <HAL_RCC_OscConfig+0xd4>
 8000ed8:	4b6b      	ldr	r3, [pc, #428]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a6a      	ldr	r2, [pc, #424]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b68      	ldr	r3, [pc, #416]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a67      	ldr	r2, [pc, #412]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d013      	beq.n	8000f20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef8:	f7ff fc06 	bl	8000708 <HAL_GetTick>
 8000efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efe:	e008      	b.n	8000f12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f00:	f7ff fc02 	bl	8000708 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b64      	cmp	r3, #100	; 0x64
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e200      	b.n	8001314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f12:	4b5d      	ldr	r3, [pc, #372]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0f0      	beq.n	8000f00 <HAL_RCC_OscConfig+0xe4>
 8000f1e:	e014      	b.n	8000f4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f20:	f7ff fbf2 	bl	8000708 <HAL_GetTick>
 8000f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f28:	f7ff fbee 	bl	8000708 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b64      	cmp	r3, #100	; 0x64
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e1ec      	b.n	8001314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3a:	4b53      	ldr	r3, [pc, #332]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f0      	bne.n	8000f28 <HAL_RCC_OscConfig+0x10c>
 8000f46:	e000      	b.n	8000f4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d063      	beq.n	800101e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f56:	4b4c      	ldr	r3, [pc, #304]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00b      	beq.n	8000f7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f62:	4b49      	ldr	r3, [pc, #292]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 030c 	and.w	r3, r3, #12
 8000f6a:	2b08      	cmp	r3, #8
 8000f6c:	d11c      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x18c>
 8000f6e:	4b46      	ldr	r3, [pc, #280]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d116      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f7a:	4b43      	ldr	r3, [pc, #268]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d005      	beq.n	8000f92 <HAL_RCC_OscConfig+0x176>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d001      	beq.n	8000f92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e1c0      	b.n	8001314 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f92:	4b3d      	ldr	r3, [pc, #244]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4939      	ldr	r1, [pc, #228]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa6:	e03a      	b.n	800101e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d020      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb0:	4b36      	ldr	r3, [pc, #216]	; (800108c <HAL_RCC_OscConfig+0x270>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb6:	f7ff fba7 	bl	8000708 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fbe:	f7ff fba3 	bl	8000708 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e1a1      	b.n	8001314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f0      	beq.n	8000fbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	4927      	ldr	r1, [pc, #156]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	4313      	orrs	r3, r2
 8000fee:	600b      	str	r3, [r1, #0]
 8000ff0:	e015      	b.n	800101e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ff2:	4b26      	ldr	r3, [pc, #152]	; (800108c <HAL_RCC_OscConfig+0x270>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fb86 	bl	8000708 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001000:	f7ff fb82 	bl	8000708 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e180      	b.n	8001314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f0      	bne.n	8001000 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0308 	and.w	r3, r3, #8
 8001026:	2b00      	cmp	r3, #0
 8001028:	d03a      	beq.n	80010a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d019      	beq.n	8001066 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_RCC_OscConfig+0x274>)
 8001034:	2201      	movs	r2, #1
 8001036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001038:	f7ff fb66 	bl	8000708 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001040:	f7ff fb62 	bl	8000708 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e160      	b.n	8001314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0f0      	beq.n	8001040 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800105e:	2001      	movs	r0, #1
 8001060:	f000 face 	bl	8001600 <RCC_Delay>
 8001064:	e01c      	b.n	80010a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_RCC_OscConfig+0x274>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106c:	f7ff fb4c 	bl	8000708 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001072:	e00f      	b.n	8001094 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001074:	f7ff fb48 	bl	8000708 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d908      	bls.n	8001094 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e146      	b.n	8001314 <HAL_RCC_OscConfig+0x4f8>
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
 800108c:	42420000 	.word	0x42420000
 8001090:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001094:	4b92      	ldr	r3, [pc, #584]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1e9      	bne.n	8001074 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f000 80a6 	beq.w	80011fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010b2:	4b8b      	ldr	r3, [pc, #556]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10d      	bne.n	80010da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	4b88      	ldr	r3, [pc, #544]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	4a87      	ldr	r2, [pc, #540]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c8:	61d3      	str	r3, [r2, #28]
 80010ca:	4b85      	ldr	r3, [pc, #532]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010d6:	2301      	movs	r3, #1
 80010d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010da:	4b82      	ldr	r3, [pc, #520]	; (80012e4 <HAL_RCC_OscConfig+0x4c8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d118      	bne.n	8001118 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010e6:	4b7f      	ldr	r3, [pc, #508]	; (80012e4 <HAL_RCC_OscConfig+0x4c8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a7e      	ldr	r2, [pc, #504]	; (80012e4 <HAL_RCC_OscConfig+0x4c8>)
 80010ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010f2:	f7ff fb09 	bl	8000708 <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010fa:	f7ff fb05 	bl	8000708 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b64      	cmp	r3, #100	; 0x64
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e103      	b.n	8001314 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110c:	4b75      	ldr	r3, [pc, #468]	; (80012e4 <HAL_RCC_OscConfig+0x4c8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f0      	beq.n	80010fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d106      	bne.n	800112e <HAL_RCC_OscConfig+0x312>
 8001120:	4b6f      	ldr	r3, [pc, #444]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4a6e      	ldr	r2, [pc, #440]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6213      	str	r3, [r2, #32]
 800112c:	e02d      	b.n	800118a <HAL_RCC_OscConfig+0x36e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10c      	bne.n	8001150 <HAL_RCC_OscConfig+0x334>
 8001136:	4b6a      	ldr	r3, [pc, #424]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	4a69      	ldr	r2, [pc, #420]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	f023 0301 	bic.w	r3, r3, #1
 8001140:	6213      	str	r3, [r2, #32]
 8001142:	4b67      	ldr	r3, [pc, #412]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	4a66      	ldr	r2, [pc, #408]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 8001148:	f023 0304 	bic.w	r3, r3, #4
 800114c:	6213      	str	r3, [r2, #32]
 800114e:	e01c      	b.n	800118a <HAL_RCC_OscConfig+0x36e>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	2b05      	cmp	r3, #5
 8001156:	d10c      	bne.n	8001172 <HAL_RCC_OscConfig+0x356>
 8001158:	4b61      	ldr	r3, [pc, #388]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	4a60      	ldr	r2, [pc, #384]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	6213      	str	r3, [r2, #32]
 8001164:	4b5e      	ldr	r3, [pc, #376]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	4a5d      	ldr	r2, [pc, #372]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6213      	str	r3, [r2, #32]
 8001170:	e00b      	b.n	800118a <HAL_RCC_OscConfig+0x36e>
 8001172:	4b5b      	ldr	r3, [pc, #364]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	4a5a      	ldr	r2, [pc, #360]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 8001178:	f023 0301 	bic.w	r3, r3, #1
 800117c:	6213      	str	r3, [r2, #32]
 800117e:	4b58      	ldr	r3, [pc, #352]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	4a57      	ldr	r2, [pc, #348]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 8001184:	f023 0304 	bic.w	r3, r3, #4
 8001188:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d015      	beq.n	80011be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001192:	f7ff fab9 	bl	8000708 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001198:	e00a      	b.n	80011b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800119a:	f7ff fab5 	bl	8000708 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e0b1      	b.n	8001314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b0:	4b4b      	ldr	r3, [pc, #300]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0ee      	beq.n	800119a <HAL_RCC_OscConfig+0x37e>
 80011bc:	e014      	b.n	80011e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011be:	f7ff faa3 	bl	8000708 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c4:	e00a      	b.n	80011dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c6:	f7ff fa9f 	bl	8000708 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e09b      	b.n	8001314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011dc:	4b40      	ldr	r3, [pc, #256]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1ee      	bne.n	80011c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d105      	bne.n	80011fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ee:	4b3c      	ldr	r3, [pc, #240]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a3b      	ldr	r2, [pc, #236]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 8087 	beq.w	8001312 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001204:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 030c 	and.w	r3, r3, #12
 800120c:	2b08      	cmp	r3, #8
 800120e:	d061      	beq.n	80012d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d146      	bne.n	80012a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001218:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <HAL_RCC_OscConfig+0x4cc>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff fa73 	bl	8000708 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001226:	f7ff fa6f 	bl	8000708 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e06d      	b.n	8001314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001238:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f0      	bne.n	8001226 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124c:	d108      	bne.n	8001260 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800124e:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	4921      	ldr	r1, [pc, #132]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 800125c:	4313      	orrs	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a19      	ldr	r1, [r3, #32]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	430b      	orrs	r3, r1
 8001272:	491b      	ldr	r1, [pc, #108]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 8001274:	4313      	orrs	r3, r2
 8001276:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_RCC_OscConfig+0x4cc>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127e:	f7ff fa43 	bl	8000708 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001286:	f7ff fa3f 	bl	8000708 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e03d      	b.n	8001314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f0      	beq.n	8001286 <HAL_RCC_OscConfig+0x46a>
 80012a4:	e035      	b.n	8001312 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_RCC_OscConfig+0x4cc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fa2c 	bl	8000708 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b4:	f7ff fa28 	bl	8000708 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e026      	b.n	8001314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x498>
 80012d2:	e01e      	b.n	8001312 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d107      	bne.n	80012ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e019      	b.n	8001314 <HAL_RCC_OscConfig+0x4f8>
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40007000 	.word	0x40007000
 80012e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_RCC_OscConfig+0x500>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d106      	bne.n	800130e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800130a:	429a      	cmp	r2, r3
 800130c:	d001      	beq.n	8001312 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40021000 	.word	0x40021000

08001320 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e0d0      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001334:	4b6a      	ldr	r3, [pc, #424]	; (80014e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d910      	bls.n	8001364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001342:	4b67      	ldr	r3, [pc, #412]	; (80014e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 0207 	bic.w	r2, r3, #7
 800134a:	4965      	ldr	r1, [pc, #404]	; (80014e0 <HAL_RCC_ClockConfig+0x1c0>)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001352:	4b63      	ldr	r3, [pc, #396]	; (80014e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d001      	beq.n	8001364 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e0b8      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d020      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800137c:	4b59      	ldr	r3, [pc, #356]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	4a58      	ldr	r2, [pc, #352]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001382:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001386:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001394:	4b53      	ldr	r3, [pc, #332]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4a52      	ldr	r2, [pc, #328]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 800139a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800139e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a0:	4b50      	ldr	r3, [pc, #320]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	494d      	ldr	r1, [pc, #308]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d040      	beq.n	8001440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d107      	bne.n	80013d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d115      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e07f      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013de:	4b41      	ldr	r3, [pc, #260]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e073      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ee:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e06b      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013fe:	4b39      	ldr	r3, [pc, #228]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f023 0203 	bic.w	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4936      	ldr	r1, [pc, #216]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 800140c:	4313      	orrs	r3, r2
 800140e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001410:	f7ff f97a 	bl	8000708 <HAL_GetTick>
 8001414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001416:	e00a      	b.n	800142e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001418:	f7ff f976 	bl	8000708 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f241 3288 	movw	r2, #5000	; 0x1388
 8001426:	4293      	cmp	r3, r2
 8001428:	d901      	bls.n	800142e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e053      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 020c 	and.w	r2, r3, #12
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	429a      	cmp	r2, r3
 800143e:	d1eb      	bne.n	8001418 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001440:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d210      	bcs.n	8001470 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 0207 	bic.w	r2, r3, #7
 8001456:	4922      	ldr	r1, [pc, #136]	; (80014e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d001      	beq.n	8001470 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e032      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	d008      	beq.n	800148e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	4916      	ldr	r1, [pc, #88]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	4313      	orrs	r3, r2
 800148c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	2b00      	cmp	r3, #0
 8001498:	d009      	beq.n	80014ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	490e      	ldr	r1, [pc, #56]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014ae:	f000 f821 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 80014b2:	4602      	mov	r2, r0
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	490a      	ldr	r1, [pc, #40]	; (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 80014c0:	5ccb      	ldrb	r3, [r1, r3]
 80014c2:	fa22 f303 	lsr.w	r3, r2, r3
 80014c6:	4a09      	ldr	r2, [pc, #36]	; (80014ec <HAL_RCC_ClockConfig+0x1cc>)
 80014c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_RCC_ClockConfig+0x1d0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff f8d8 	bl	8000684 <HAL_InitTick>

  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40022000 	.word	0x40022000
 80014e4:	40021000 	.word	0x40021000
 80014e8:	08002cfc 	.word	0x08002cfc
 80014ec:	20000004 	.word	0x20000004
 80014f0:	20000008 	.word	0x20000008

080014f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800150e:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <HAL_RCC_GetSysClockFreq+0x94>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b04      	cmp	r3, #4
 800151c:	d002      	beq.n	8001524 <HAL_RCC_GetSysClockFreq+0x30>
 800151e:	2b08      	cmp	r3, #8
 8001520:	d003      	beq.n	800152a <HAL_RCC_GetSysClockFreq+0x36>
 8001522:	e027      	b.n	8001574 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_RCC_GetSysClockFreq+0x98>)
 8001526:	613b      	str	r3, [r7, #16]
      break;
 8001528:	e027      	b.n	800157a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	0c9b      	lsrs	r3, r3, #18
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	4a17      	ldr	r2, [pc, #92]	; (8001590 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001534:	5cd3      	ldrb	r3, [r2, r3]
 8001536:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d010      	beq.n	8001564 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_RCC_GetSysClockFreq+0x94>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	0c5b      	lsrs	r3, r3, #17
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	4a11      	ldr	r2, [pc, #68]	; (8001594 <HAL_RCC_GetSysClockFreq+0xa0>)
 800154e:	5cd3      	ldrb	r3, [r2, r3]
 8001550:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a0d      	ldr	r2, [pc, #52]	; (800158c <HAL_RCC_GetSysClockFreq+0x98>)
 8001556:	fb03 f202 	mul.w	r2, r3, r2
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	e004      	b.n	800156e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a0c      	ldr	r2, [pc, #48]	; (8001598 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001568:	fb02 f303 	mul.w	r3, r2, r3
 800156c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	613b      	str	r3, [r7, #16]
      break;
 8001572:	e002      	b.n	800157a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_RCC_GetSysClockFreq+0x98>)
 8001576:	613b      	str	r3, [r7, #16]
      break;
 8001578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800157a:	693b      	ldr	r3, [r7, #16]
}
 800157c:	4618      	mov	r0, r3
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000
 800158c:	007a1200 	.word	0x007a1200
 8001590:	08002d14 	.word	0x08002d14
 8001594:	08002d24 	.word	0x08002d24
 8001598:	003d0900 	.word	0x003d0900

0800159c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015a0:	4b02      	ldr	r3, [pc, #8]	; (80015ac <HAL_RCC_GetHCLKFreq+0x10>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	20000004 	.word	0x20000004

080015b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015b4:	f7ff fff2 	bl	800159c <HAL_RCC_GetHCLKFreq>
 80015b8:	4602      	mov	r2, r0
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	0a1b      	lsrs	r3, r3, #8
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	4903      	ldr	r1, [pc, #12]	; (80015d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015c6:	5ccb      	ldrb	r3, [r1, r3]
 80015c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40021000 	.word	0x40021000
 80015d4:	08002d0c 	.word	0x08002d0c

080015d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015dc:	f7ff ffde 	bl	800159c <HAL_RCC_GetHCLKFreq>
 80015e0:	4602      	mov	r2, r0
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	0adb      	lsrs	r3, r3, #11
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	4903      	ldr	r1, [pc, #12]	; (80015fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80015ee:	5ccb      	ldrb	r3, [r1, r3]
 80015f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000
 80015fc:	08002d0c 	.word	0x08002d0c

08001600 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <RCC_Delay+0x34>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <RCC_Delay+0x38>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	0a5b      	lsrs	r3, r3, #9
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	fb02 f303 	mul.w	r3, r2, r3
 800161a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800161c:	bf00      	nop
  }
  while (Delay --);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1e5a      	subs	r2, r3, #1
 8001622:	60fa      	str	r2, [r7, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f9      	bne.n	800161c <RCC_Delay+0x1c>
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	20000004 	.word	0x20000004
 8001638:	10624dd3 	.word	0x10624dd3

0800163c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e042      	b.n	80016d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d106      	bne.n	8001668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7fe fec6 	bl	80003f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2224      	movs	r2, #36	; 0x24
 800166c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800167e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 fdf1 	bl	8002268 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	695a      	ldr	r2, [r3, #20]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80016a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2220      	movs	r2, #32
 80016c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2220      	movs	r2, #32
 80016c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	4613      	mov	r3, r2
 80016ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b20      	cmp	r3, #32
 80016fa:	d16d      	bne.n	80017d8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <HAL_UART_Transmit+0x2c>
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e066      	b.n	80017da <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2221      	movs	r2, #33	; 0x21
 8001716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800171a:	f7fe fff5 	bl	8000708 <HAL_GetTick>
 800171e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	88fa      	ldrh	r2, [r7, #6]
 8001724:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	88fa      	ldrh	r2, [r7, #6]
 800172a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001734:	d108      	bne.n	8001748 <HAL_UART_Transmit+0x6c>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d104      	bne.n	8001748 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	e003      	b.n	8001750 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001750:	e02a      	b.n	80017a8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2200      	movs	r2, #0
 800175a:	2180      	movs	r1, #128	; 0x80
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f000 fb41 	bl	8001de4 <UART_WaitOnFlagUntilTimeout>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e036      	b.n	80017da <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10b      	bne.n	800178a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001780:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	3302      	adds	r3, #2
 8001786:	61bb      	str	r3, [r7, #24]
 8001788:	e007      	b.n	800179a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	781a      	ldrb	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	3301      	adds	r3, #1
 8001798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1cf      	bne.n	8001752 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2200      	movs	r2, #0
 80017ba:	2140      	movs	r1, #64	; 0x40
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 fb11 	bl	8001de4 <UART_WaitOnFlagUntilTimeout>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e006      	b.n	80017da <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2220      	movs	r2, #32
 80017d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e000      	b.n	80017da <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80017d8:	2302      	movs	r3, #2
  }
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3720      	adds	r7, #32
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b085      	sub	sp, #20
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	4613      	mov	r3, r2
 80017ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b20      	cmp	r3, #32
 80017fa:	d121      	bne.n	8001840 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d002      	beq.n	8001808 <HAL_UART_Transmit_IT+0x26>
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e01a      	b.n	8001842 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	88fa      	ldrh	r2, [r7, #6]
 8001816:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	88fa      	ldrh	r2, [r7, #6]
 800181c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2221      	movs	r2, #33	; 0x21
 8001828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800183a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	e000      	b.n	8001842 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001840:	2302      	movs	r3, #2
  }
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	4613      	mov	r3, r2
 8001858:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b20      	cmp	r3, #32
 8001864:	d112      	bne.n	800188c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <HAL_UART_Receive_IT+0x26>
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e00b      	b.n	800188e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	461a      	mov	r2, r3
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 fb1c 	bl	8001ec0 <UART_Start_Receive_IT>
 8001888:	4603      	mov	r3, r0
 800188a:	e000      	b.n	800188e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800188c:	2302      	movs	r3, #2
  }
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b0ba      	sub	sp, #232	; 0xe8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80018ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80018d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10f      	bne.n	80018fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80018de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80018e2:	f003 0320 	and.w	r3, r3, #32
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_UART_IRQHandler+0x66>
 80018ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018ee:	f003 0320 	and.w	r3, r3, #32
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 fbf8 	bl	80020ec <UART_Receive_IT>
      return;
 80018fc:	e25b      	b.n	8001db6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80018fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 80de 	beq.w	8001ac4 <HAL_UART_IRQHandler+0x22c>
 8001908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d106      	bne.n	8001922 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001918:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80d1 	beq.w	8001ac4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00b      	beq.n	8001946 <HAL_UART_IRQHandler+0xae>
 800192e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001936:	2b00      	cmp	r3, #0
 8001938:	d005      	beq.n	8001946 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	f043 0201 	orr.w	r2, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00b      	beq.n	800196a <HAL_UART_IRQHandler+0xd2>
 8001952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f043 0202 	orr.w	r2, r3, #2
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800196a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_UART_IRQHandler+0xf6>
 8001976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	f043 0204 	orr.w	r2, r3, #4
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800198e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d011      	beq.n	80019be <HAL_UART_IRQHandler+0x126>
 800199a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800199e:	f003 0320 	and.w	r3, r3, #32
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d105      	bne.n	80019b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80019a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f043 0208 	orr.w	r2, r3, #8
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 81f2 	beq.w	8001dac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80019c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019cc:	f003 0320 	and.w	r3, r3, #32
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <HAL_UART_IRQHandler+0x14e>
 80019d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fb83 	bl	80020ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d103      	bne.n	8001a12 <HAL_UART_IRQHandler+0x17a>
 8001a0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d04f      	beq.n	8001ab2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fa8d 	bl	8001f32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d041      	beq.n	8001aaa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3314      	adds	r3, #20
 8001a2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a34:	e853 3f00 	ldrex	r3, [r3]
 8001a38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3314      	adds	r3, #20
 8001a4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001a52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001a56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001a5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001a62:	e841 2300 	strex	r3, r2, [r1]
 8001a66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001a6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1d9      	bne.n	8001a26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d013      	beq.n	8001aa2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7e:	4a7e      	ldr	r2, [pc, #504]	; (8001c78 <HAL_UART_IRQHandler+0x3e0>)
 8001a80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe ffb4 	bl	80009f4 <HAL_DMA_Abort_IT>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d016      	beq.n	8001ac0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001aa0:	e00e      	b.n	8001ac0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f98a 	bl	8001dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001aa8:	e00a      	b.n	8001ac0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f986 	bl	8001dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ab0:	e006      	b.n	8001ac0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f982 	bl	8001dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001abe:	e175      	b.n	8001dac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ac0:	bf00      	nop
    return;
 8001ac2:	e173      	b.n	8001dac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	f040 814f 	bne.w	8001d6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8148 	beq.w	8001d6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 8141 	beq.w	8001d6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 80b6 	beq.w	8001c7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001b1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 8145 	beq.w	8001db0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	f080 813e 	bcs.w	8001db0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001b3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	2b20      	cmp	r3, #32
 8001b44:	f000 8088 	beq.w	8001c58 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	330c      	adds	r3, #12
 8001b4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b56:	e853 3f00 	ldrex	r3, [r3]
 8001b5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001b5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	330c      	adds	r3, #12
 8001b70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001b74:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001b78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001b80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001b84:	e841 2300 	strex	r3, r2, [r1]
 8001b88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1d9      	bne.n	8001b48 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3314      	adds	r3, #20
 8001b9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b9e:	e853 3f00 	ldrex	r3, [r3]
 8001ba2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001ba4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ba6:	f023 0301 	bic.w	r3, r3, #1
 8001baa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	3314      	adds	r3, #20
 8001bb4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001bb8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001bbc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bbe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001bc0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001bc4:	e841 2300 	strex	r3, r2, [r1]
 8001bc8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001bca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1e1      	bne.n	8001b94 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3314      	adds	r3, #20
 8001bd6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bda:	e853 3f00 	ldrex	r3, [r3]
 8001bde:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001be6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	3314      	adds	r3, #20
 8001bf0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001bf4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001bf6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bf8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001bfa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001bfc:	e841 2300 	strex	r3, r2, [r1]
 8001c00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001c02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1e3      	bne.n	8001bd0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	330c      	adds	r3, #12
 8001c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c20:	e853 3f00 	ldrex	r3, [r3]
 8001c24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c28:	f023 0310 	bic.w	r3, r3, #16
 8001c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	330c      	adds	r3, #12
 8001c36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001c3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c3c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c42:	e841 2300 	strex	r3, r2, [r1]
 8001c46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1e3      	bne.n	8001c16 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fe93 	bl	800097e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f8ad 	bl	8001dce <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001c74:	e09c      	b.n	8001db0 <HAL_UART_IRQHandler+0x518>
 8001c76:	bf00      	nop
 8001c78:	08001ff7 	.word	0x08001ff7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 808e 	beq.w	8001db4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001c98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 8089 	beq.w	8001db4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	330c      	adds	r3, #12
 8001ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cac:	e853 3f00 	ldrex	r3, [r3]
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001cb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	330c      	adds	r3, #12
 8001cc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001cc6:	647a      	str	r2, [r7, #68]	; 0x44
 8001cc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001cce:	e841 2300 	strex	r3, r2, [r1]
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1e3      	bne.n	8001ca2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	3314      	adds	r3, #20
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	e853 3f00 	ldrex	r3, [r3]
 8001ce8:	623b      	str	r3, [r7, #32]
   return(result);
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	f023 0301 	bic.w	r3, r3, #1
 8001cf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3314      	adds	r3, #20
 8001cfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001cfe:	633a      	str	r2, [r7, #48]	; 0x30
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d06:	e841 2300 	strex	r3, r2, [r1]
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1e3      	bne.n	8001cda <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	330c      	adds	r3, #12
 8001d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	e853 3f00 	ldrex	r3, [r3]
 8001d2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f023 0310 	bic.w	r3, r3, #16
 8001d36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	330c      	adds	r3, #12
 8001d40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001d44:	61fa      	str	r2, [r7, #28]
 8001d46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d48:	69b9      	ldr	r1, [r7, #24]
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	e841 2300 	strex	r3, r2, [r1]
 8001d50:	617b      	str	r3, [r7, #20]
   return(result);
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1e3      	bne.n	8001d20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001d5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001d62:	4619      	mov	r1, r3
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f832 	bl	8001dce <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001d6a:	e023      	b.n	8001db4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d009      	beq.n	8001d8c <HAL_UART_IRQHandler+0x4f4>
 8001d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f94a 	bl	800201e <UART_Transmit_IT>
    return;
 8001d8a:	e014      	b.n	8001db6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00e      	beq.n	8001db6 <HAL_UART_IRQHandler+0x51e>
 8001d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f989 	bl	80020bc <UART_EndTransmit_IT>
    return;
 8001daa:	e004      	b.n	8001db6 <HAL_UART_IRQHandler+0x51e>
    return;
 8001dac:	bf00      	nop
 8001dae:	e002      	b.n	8001db6 <HAL_UART_IRQHandler+0x51e>
      return;
 8001db0:	bf00      	nop
 8001db2:	e000      	b.n	8001db6 <HAL_UART_IRQHandler+0x51e>
      return;
 8001db4:	bf00      	nop
  }
}
 8001db6:	37e8      	adds	r7, #232	; 0xe8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b090      	sub	sp, #64	; 0x40
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	4613      	mov	r3, r2
 8001df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001df4:	e050      	b.n	8001e98 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfc:	d04c      	beq.n	8001e98 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d007      	beq.n	8001e14 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e04:	f7fe fc80 	bl	8000708 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d241      	bcs.n	8001e98 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	330c      	adds	r3, #12
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1e:	e853 3f00 	ldrex	r3, [r3]
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	330c      	adds	r3, #12
 8001e32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e34:	637a      	str	r2, [r7, #52]	; 0x34
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e3c:	e841 2300 	strex	r3, r2, [r1]
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1e5      	bne.n	8001e14 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3314      	adds	r3, #20
 8001e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	e853 3f00 	ldrex	r3, [r3]
 8001e56:	613b      	str	r3, [r7, #16]
   return(result);
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	f023 0301 	bic.w	r3, r3, #1
 8001e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	3314      	adds	r3, #20
 8001e66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e68:	623a      	str	r2, [r7, #32]
 8001e6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e6c:	69f9      	ldr	r1, [r7, #28]
 8001e6e:	6a3a      	ldr	r2, [r7, #32]
 8001e70:	e841 2300 	strex	r3, r2, [r1]
 8001e74:	61bb      	str	r3, [r7, #24]
   return(result);
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1e5      	bne.n	8001e48 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e00f      	b.n	8001eb8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d09f      	beq.n	8001df6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3740      	adds	r7, #64	; 0x40
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	88fa      	ldrh	r2, [r7, #6]
 8001ed8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	88fa      	ldrh	r2, [r7, #6]
 8001ede:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2222      	movs	r2, #34	; 0x22
 8001eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d007      	beq.n	8001f06 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f04:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	695a      	ldr	r2, [r3, #20]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0220 	orr.w	r2, r2, #32
 8001f24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b095      	sub	sp, #84	; 0x54
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	330c      	adds	r3, #12
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f44:	e853 3f00 	ldrex	r3, [r3]
 8001f48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001f50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	330c      	adds	r3, #12
 8001f58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f5a:	643a      	str	r2, [r7, #64]	; 0x40
 8001f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f62:	e841 2300 	strex	r3, r2, [r1]
 8001f66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1e5      	bne.n	8001f3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	3314      	adds	r3, #20
 8001f74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	e853 3f00 	ldrex	r3, [r3]
 8001f7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f023 0301 	bic.w	r3, r3, #1
 8001f84:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	3314      	adds	r3, #20
 8001f8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f96:	e841 2300 	strex	r3, r2, [r1]
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1e5      	bne.n	8001f6e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d119      	bne.n	8001fde <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	330c      	adds	r3, #12
 8001fb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	e853 3f00 	ldrex	r3, [r3]
 8001fb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	f023 0310 	bic.w	r3, r3, #16
 8001fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	330c      	adds	r3, #12
 8001fc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fca:	61ba      	str	r2, [r7, #24]
 8001fcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fce:	6979      	ldr	r1, [r7, #20]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	e841 2300 	strex	r3, r2, [r1]
 8001fd6:	613b      	str	r3, [r7, #16]
   return(result);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1e5      	bne.n	8001faa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001fec:	bf00      	nop
 8001fee:	3754      	adds	r7, #84	; 0x54
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr

08001ff6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7ff fed3 	bl	8001dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800201e:	b480      	push	{r7}
 8002020:	b085      	sub	sp, #20
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b21      	cmp	r3, #33	; 0x21
 8002030:	d13e      	bne.n	80020b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203a:	d114      	bne.n	8002066 <UART_Transmit_IT+0x48>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d110      	bne.n	8002066 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002058:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	1c9a      	adds	r2, r3, #2
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	621a      	str	r2, [r3, #32]
 8002064:	e008      	b.n	8002078 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	1c59      	adds	r1, r3, #1
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6211      	str	r1, [r2, #32]
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800207c:	b29b      	uxth	r3, r3
 800207e:	3b01      	subs	r3, #1
 8002080:	b29b      	uxth	r3, r3
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4619      	mov	r1, r3
 8002086:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10f      	bne.n	80020ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800209a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e000      	b.n	80020b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80020b0:	2302      	movs	r3, #2
  }
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7fe f933 	bl	8000348 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08c      	sub	sp, #48	; 0x30
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b22      	cmp	r3, #34	; 0x22
 80020fe:	f040 80ae 	bne.w	800225e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800210a:	d117      	bne.n	800213c <UART_Receive_IT+0x50>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d113      	bne.n	800213c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002114:	2300      	movs	r3, #0
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	b29b      	uxth	r3, r3
 8002126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800212a:	b29a      	uxth	r2, r3
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	1c9a      	adds	r2, r3, #2
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
 800213a:	e026      	b.n	800218a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002142:	2300      	movs	r3, #0
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800214e:	d007      	beq.n	8002160 <UART_Receive_IT+0x74>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10a      	bne.n	800216e <UART_Receive_IT+0x82>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d106      	bne.n	800216e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216a:	701a      	strb	r2, [r3, #0]
 800216c:	e008      	b.n	8002180 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800217a:	b2da      	uxtb	r2, r3
 800217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800218e:	b29b      	uxth	r3, r3
 8002190:	3b01      	subs	r3, #1
 8002192:	b29b      	uxth	r3, r3
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4619      	mov	r1, r3
 8002198:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800219a:	2b00      	cmp	r3, #0
 800219c:	d15d      	bne.n	800225a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0220 	bic.w	r2, r2, #32
 80021ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0201 	bic.w	r2, r2, #1
 80021cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d135      	bne.n	8002250 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	330c      	adds	r3, #12
 80021f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	e853 3f00 	ldrex	r3, [r3]
 80021f8:	613b      	str	r3, [r7, #16]
   return(result);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f023 0310 	bic.w	r3, r3, #16
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	330c      	adds	r3, #12
 8002208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800220a:	623a      	str	r2, [r7, #32]
 800220c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800220e:	69f9      	ldr	r1, [r7, #28]
 8002210:	6a3a      	ldr	r2, [r7, #32]
 8002212:	e841 2300 	strex	r3, r2, [r1]
 8002216:	61bb      	str	r3, [r7, #24]
   return(result);
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1e5      	bne.n	80021ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b10      	cmp	r3, #16
 800222a:	d10a      	bne.n	8002242 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002246:	4619      	mov	r1, r3
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff fdc0 	bl	8001dce <HAL_UARTEx_RxEventCallback>
 800224e:	e002      	b.n	8002256 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7fe f883 	bl	800035c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e002      	b.n	8002260 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800225e:	2302      	movs	r3, #2
  }
}
 8002260:	4618      	mov	r0, r3
 8002262:	3730      	adds	r7, #48	; 0x30
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	4313      	orrs	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022a2:	f023 030c 	bic.w	r3, r3, #12
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	68b9      	ldr	r1, [r7, #8]
 80022ac:	430b      	orrs	r3, r1
 80022ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a2c      	ldr	r2, [pc, #176]	; (800237c <UART_SetConfig+0x114>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d103      	bne.n	80022d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022d0:	f7ff f982 	bl	80015d8 <HAL_RCC_GetPCLK2Freq>
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	e002      	b.n	80022de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022d8:	f7ff f96a 	bl	80015b0 <HAL_RCC_GetPCLK1Freq>
 80022dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	009a      	lsls	r2, r3, #2
 80022e8:	441a      	add	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f4:	4a22      	ldr	r2, [pc, #136]	; (8002380 <UART_SetConfig+0x118>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	0119      	lsls	r1, r3, #4
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	009a      	lsls	r2, r3, #2
 8002308:	441a      	add	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	fbb2 f2f3 	udiv	r2, r2, r3
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <UART_SetConfig+0x118>)
 8002316:	fba3 0302 	umull	r0, r3, r3, r2
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	2064      	movs	r0, #100	; 0x64
 800231e:	fb00 f303 	mul.w	r3, r0, r3
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	3332      	adds	r3, #50	; 0x32
 8002328:	4a15      	ldr	r2, [pc, #84]	; (8002380 <UART_SetConfig+0x118>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002334:	4419      	add	r1, r3
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	009a      	lsls	r2, r3, #2
 8002340:	441a      	add	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	fbb2 f2f3 	udiv	r2, r2, r3
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <UART_SetConfig+0x118>)
 800234e:	fba3 0302 	umull	r0, r3, r3, r2
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	2064      	movs	r0, #100	; 0x64
 8002356:	fb00 f303 	mul.w	r3, r0, r3
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	3332      	adds	r3, #50	; 0x32
 8002360:	4a07      	ldr	r2, [pc, #28]	; (8002380 <UART_SetConfig+0x118>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	f003 020f 	and.w	r2, r3, #15
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	440a      	add	r2, r1
 8002372:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40013800 	.word	0x40013800
 8002380:	51eb851f 	.word	0x51eb851f

08002384 <__errno>:
 8002384:	4b01      	ldr	r3, [pc, #4]	; (800238c <__errno+0x8>)
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000010 	.word	0x20000010

08002390 <__libc_init_array>:
 8002390:	b570      	push	{r4, r5, r6, lr}
 8002392:	2600      	movs	r6, #0
 8002394:	4d0c      	ldr	r5, [pc, #48]	; (80023c8 <__libc_init_array+0x38>)
 8002396:	4c0d      	ldr	r4, [pc, #52]	; (80023cc <__libc_init_array+0x3c>)
 8002398:	1b64      	subs	r4, r4, r5
 800239a:	10a4      	asrs	r4, r4, #2
 800239c:	42a6      	cmp	r6, r4
 800239e:	d109      	bne.n	80023b4 <__libc_init_array+0x24>
 80023a0:	f000 fc9c 	bl	8002cdc <_init>
 80023a4:	2600      	movs	r6, #0
 80023a6:	4d0a      	ldr	r5, [pc, #40]	; (80023d0 <__libc_init_array+0x40>)
 80023a8:	4c0a      	ldr	r4, [pc, #40]	; (80023d4 <__libc_init_array+0x44>)
 80023aa:	1b64      	subs	r4, r4, r5
 80023ac:	10a4      	asrs	r4, r4, #2
 80023ae:	42a6      	cmp	r6, r4
 80023b0:	d105      	bne.n	80023be <__libc_init_array+0x2e>
 80023b2:	bd70      	pop	{r4, r5, r6, pc}
 80023b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b8:	4798      	blx	r3
 80023ba:	3601      	adds	r6, #1
 80023bc:	e7ee      	b.n	800239c <__libc_init_array+0xc>
 80023be:	f855 3b04 	ldr.w	r3, [r5], #4
 80023c2:	4798      	blx	r3
 80023c4:	3601      	adds	r6, #1
 80023c6:	e7f2      	b.n	80023ae <__libc_init_array+0x1e>
 80023c8:	08002d5c 	.word	0x08002d5c
 80023cc:	08002d5c 	.word	0x08002d5c
 80023d0:	08002d5c 	.word	0x08002d5c
 80023d4:	08002d60 	.word	0x08002d60

080023d8 <memset>:
 80023d8:	4603      	mov	r3, r0
 80023da:	4402      	add	r2, r0
 80023dc:	4293      	cmp	r3, r2
 80023de:	d100      	bne.n	80023e2 <memset+0xa>
 80023e0:	4770      	bx	lr
 80023e2:	f803 1b01 	strb.w	r1, [r3], #1
 80023e6:	e7f9      	b.n	80023dc <memset+0x4>

080023e8 <siprintf>:
 80023e8:	b40e      	push	{r1, r2, r3}
 80023ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80023ee:	b500      	push	{lr}
 80023f0:	b09c      	sub	sp, #112	; 0x70
 80023f2:	ab1d      	add	r3, sp, #116	; 0x74
 80023f4:	9002      	str	r0, [sp, #8]
 80023f6:	9006      	str	r0, [sp, #24]
 80023f8:	9107      	str	r1, [sp, #28]
 80023fa:	9104      	str	r1, [sp, #16]
 80023fc:	4808      	ldr	r0, [pc, #32]	; (8002420 <siprintf+0x38>)
 80023fe:	4909      	ldr	r1, [pc, #36]	; (8002424 <siprintf+0x3c>)
 8002400:	f853 2b04 	ldr.w	r2, [r3], #4
 8002404:	9105      	str	r1, [sp, #20]
 8002406:	6800      	ldr	r0, [r0, #0]
 8002408:	a902      	add	r1, sp, #8
 800240a:	9301      	str	r3, [sp, #4]
 800240c:	f000 f868 	bl	80024e0 <_svfiprintf_r>
 8002410:	2200      	movs	r2, #0
 8002412:	9b02      	ldr	r3, [sp, #8]
 8002414:	701a      	strb	r2, [r3, #0]
 8002416:	b01c      	add	sp, #112	; 0x70
 8002418:	f85d eb04 	ldr.w	lr, [sp], #4
 800241c:	b003      	add	sp, #12
 800241e:	4770      	bx	lr
 8002420:	20000010 	.word	0x20000010
 8002424:	ffff0208 	.word	0xffff0208

08002428 <__ssputs_r>:
 8002428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800242c:	688e      	ldr	r6, [r1, #8]
 800242e:	4682      	mov	sl, r0
 8002430:	429e      	cmp	r6, r3
 8002432:	460c      	mov	r4, r1
 8002434:	4690      	mov	r8, r2
 8002436:	461f      	mov	r7, r3
 8002438:	d838      	bhi.n	80024ac <__ssputs_r+0x84>
 800243a:	898a      	ldrh	r2, [r1, #12]
 800243c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002440:	d032      	beq.n	80024a8 <__ssputs_r+0x80>
 8002442:	6825      	ldr	r5, [r4, #0]
 8002444:	6909      	ldr	r1, [r1, #16]
 8002446:	3301      	adds	r3, #1
 8002448:	eba5 0901 	sub.w	r9, r5, r1
 800244c:	6965      	ldr	r5, [r4, #20]
 800244e:	444b      	add	r3, r9
 8002450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002454:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002458:	106d      	asrs	r5, r5, #1
 800245a:	429d      	cmp	r5, r3
 800245c:	bf38      	it	cc
 800245e:	461d      	movcc	r5, r3
 8002460:	0553      	lsls	r3, r2, #21
 8002462:	d531      	bpl.n	80024c8 <__ssputs_r+0xa0>
 8002464:	4629      	mov	r1, r5
 8002466:	f000 fb6f 	bl	8002b48 <_malloc_r>
 800246a:	4606      	mov	r6, r0
 800246c:	b950      	cbnz	r0, 8002484 <__ssputs_r+0x5c>
 800246e:	230c      	movs	r3, #12
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	f8ca 3000 	str.w	r3, [sl]
 8002478:	89a3      	ldrh	r3, [r4, #12]
 800247a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800247e:	81a3      	strh	r3, [r4, #12]
 8002480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002484:	464a      	mov	r2, r9
 8002486:	6921      	ldr	r1, [r4, #16]
 8002488:	f000 face 	bl	8002a28 <memcpy>
 800248c:	89a3      	ldrh	r3, [r4, #12]
 800248e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002496:	81a3      	strh	r3, [r4, #12]
 8002498:	6126      	str	r6, [r4, #16]
 800249a:	444e      	add	r6, r9
 800249c:	6026      	str	r6, [r4, #0]
 800249e:	463e      	mov	r6, r7
 80024a0:	6165      	str	r5, [r4, #20]
 80024a2:	eba5 0509 	sub.w	r5, r5, r9
 80024a6:	60a5      	str	r5, [r4, #8]
 80024a8:	42be      	cmp	r6, r7
 80024aa:	d900      	bls.n	80024ae <__ssputs_r+0x86>
 80024ac:	463e      	mov	r6, r7
 80024ae:	4632      	mov	r2, r6
 80024b0:	4641      	mov	r1, r8
 80024b2:	6820      	ldr	r0, [r4, #0]
 80024b4:	f000 fac6 	bl	8002a44 <memmove>
 80024b8:	68a3      	ldr	r3, [r4, #8]
 80024ba:	2000      	movs	r0, #0
 80024bc:	1b9b      	subs	r3, r3, r6
 80024be:	60a3      	str	r3, [r4, #8]
 80024c0:	6823      	ldr	r3, [r4, #0]
 80024c2:	4433      	add	r3, r6
 80024c4:	6023      	str	r3, [r4, #0]
 80024c6:	e7db      	b.n	8002480 <__ssputs_r+0x58>
 80024c8:	462a      	mov	r2, r5
 80024ca:	f000 fbb1 	bl	8002c30 <_realloc_r>
 80024ce:	4606      	mov	r6, r0
 80024d0:	2800      	cmp	r0, #0
 80024d2:	d1e1      	bne.n	8002498 <__ssputs_r+0x70>
 80024d4:	4650      	mov	r0, sl
 80024d6:	6921      	ldr	r1, [r4, #16]
 80024d8:	f000 face 	bl	8002a78 <_free_r>
 80024dc:	e7c7      	b.n	800246e <__ssputs_r+0x46>
	...

080024e0 <_svfiprintf_r>:
 80024e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024e4:	4698      	mov	r8, r3
 80024e6:	898b      	ldrh	r3, [r1, #12]
 80024e8:	4607      	mov	r7, r0
 80024ea:	061b      	lsls	r3, r3, #24
 80024ec:	460d      	mov	r5, r1
 80024ee:	4614      	mov	r4, r2
 80024f0:	b09d      	sub	sp, #116	; 0x74
 80024f2:	d50e      	bpl.n	8002512 <_svfiprintf_r+0x32>
 80024f4:	690b      	ldr	r3, [r1, #16]
 80024f6:	b963      	cbnz	r3, 8002512 <_svfiprintf_r+0x32>
 80024f8:	2140      	movs	r1, #64	; 0x40
 80024fa:	f000 fb25 	bl	8002b48 <_malloc_r>
 80024fe:	6028      	str	r0, [r5, #0]
 8002500:	6128      	str	r0, [r5, #16]
 8002502:	b920      	cbnz	r0, 800250e <_svfiprintf_r+0x2e>
 8002504:	230c      	movs	r3, #12
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	e0d1      	b.n	80026b2 <_svfiprintf_r+0x1d2>
 800250e:	2340      	movs	r3, #64	; 0x40
 8002510:	616b      	str	r3, [r5, #20]
 8002512:	2300      	movs	r3, #0
 8002514:	9309      	str	r3, [sp, #36]	; 0x24
 8002516:	2320      	movs	r3, #32
 8002518:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800251c:	2330      	movs	r3, #48	; 0x30
 800251e:	f04f 0901 	mov.w	r9, #1
 8002522:	f8cd 800c 	str.w	r8, [sp, #12]
 8002526:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80026cc <_svfiprintf_r+0x1ec>
 800252a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800252e:	4623      	mov	r3, r4
 8002530:	469a      	mov	sl, r3
 8002532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002536:	b10a      	cbz	r2, 800253c <_svfiprintf_r+0x5c>
 8002538:	2a25      	cmp	r2, #37	; 0x25
 800253a:	d1f9      	bne.n	8002530 <_svfiprintf_r+0x50>
 800253c:	ebba 0b04 	subs.w	fp, sl, r4
 8002540:	d00b      	beq.n	800255a <_svfiprintf_r+0x7a>
 8002542:	465b      	mov	r3, fp
 8002544:	4622      	mov	r2, r4
 8002546:	4629      	mov	r1, r5
 8002548:	4638      	mov	r0, r7
 800254a:	f7ff ff6d 	bl	8002428 <__ssputs_r>
 800254e:	3001      	adds	r0, #1
 8002550:	f000 80aa 	beq.w	80026a8 <_svfiprintf_r+0x1c8>
 8002554:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002556:	445a      	add	r2, fp
 8002558:	9209      	str	r2, [sp, #36]	; 0x24
 800255a:	f89a 3000 	ldrb.w	r3, [sl]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 80a2 	beq.w	80026a8 <_svfiprintf_r+0x1c8>
 8002564:	2300      	movs	r3, #0
 8002566:	f04f 32ff 	mov.w	r2, #4294967295
 800256a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800256e:	f10a 0a01 	add.w	sl, sl, #1
 8002572:	9304      	str	r3, [sp, #16]
 8002574:	9307      	str	r3, [sp, #28]
 8002576:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800257a:	931a      	str	r3, [sp, #104]	; 0x68
 800257c:	4654      	mov	r4, sl
 800257e:	2205      	movs	r2, #5
 8002580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002584:	4851      	ldr	r0, [pc, #324]	; (80026cc <_svfiprintf_r+0x1ec>)
 8002586:	f000 fa41 	bl	8002a0c <memchr>
 800258a:	9a04      	ldr	r2, [sp, #16]
 800258c:	b9d8      	cbnz	r0, 80025c6 <_svfiprintf_r+0xe6>
 800258e:	06d0      	lsls	r0, r2, #27
 8002590:	bf44      	itt	mi
 8002592:	2320      	movmi	r3, #32
 8002594:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002598:	0711      	lsls	r1, r2, #28
 800259a:	bf44      	itt	mi
 800259c:	232b      	movmi	r3, #43	; 0x2b
 800259e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025a2:	f89a 3000 	ldrb.w	r3, [sl]
 80025a6:	2b2a      	cmp	r3, #42	; 0x2a
 80025a8:	d015      	beq.n	80025d6 <_svfiprintf_r+0xf6>
 80025aa:	4654      	mov	r4, sl
 80025ac:	2000      	movs	r0, #0
 80025ae:	f04f 0c0a 	mov.w	ip, #10
 80025b2:	9a07      	ldr	r2, [sp, #28]
 80025b4:	4621      	mov	r1, r4
 80025b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025ba:	3b30      	subs	r3, #48	; 0x30
 80025bc:	2b09      	cmp	r3, #9
 80025be:	d94e      	bls.n	800265e <_svfiprintf_r+0x17e>
 80025c0:	b1b0      	cbz	r0, 80025f0 <_svfiprintf_r+0x110>
 80025c2:	9207      	str	r2, [sp, #28]
 80025c4:	e014      	b.n	80025f0 <_svfiprintf_r+0x110>
 80025c6:	eba0 0308 	sub.w	r3, r0, r8
 80025ca:	fa09 f303 	lsl.w	r3, r9, r3
 80025ce:	4313      	orrs	r3, r2
 80025d0:	46a2      	mov	sl, r4
 80025d2:	9304      	str	r3, [sp, #16]
 80025d4:	e7d2      	b.n	800257c <_svfiprintf_r+0x9c>
 80025d6:	9b03      	ldr	r3, [sp, #12]
 80025d8:	1d19      	adds	r1, r3, #4
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	9103      	str	r1, [sp, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	bfbb      	ittet	lt
 80025e2:	425b      	neglt	r3, r3
 80025e4:	f042 0202 	orrlt.w	r2, r2, #2
 80025e8:	9307      	strge	r3, [sp, #28]
 80025ea:	9307      	strlt	r3, [sp, #28]
 80025ec:	bfb8      	it	lt
 80025ee:	9204      	strlt	r2, [sp, #16]
 80025f0:	7823      	ldrb	r3, [r4, #0]
 80025f2:	2b2e      	cmp	r3, #46	; 0x2e
 80025f4:	d10c      	bne.n	8002610 <_svfiprintf_r+0x130>
 80025f6:	7863      	ldrb	r3, [r4, #1]
 80025f8:	2b2a      	cmp	r3, #42	; 0x2a
 80025fa:	d135      	bne.n	8002668 <_svfiprintf_r+0x188>
 80025fc:	9b03      	ldr	r3, [sp, #12]
 80025fe:	3402      	adds	r4, #2
 8002600:	1d1a      	adds	r2, r3, #4
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	9203      	str	r2, [sp, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	bfb8      	it	lt
 800260a:	f04f 33ff 	movlt.w	r3, #4294967295
 800260e:	9305      	str	r3, [sp, #20]
 8002610:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80026d0 <_svfiprintf_r+0x1f0>
 8002614:	2203      	movs	r2, #3
 8002616:	4650      	mov	r0, sl
 8002618:	7821      	ldrb	r1, [r4, #0]
 800261a:	f000 f9f7 	bl	8002a0c <memchr>
 800261e:	b140      	cbz	r0, 8002632 <_svfiprintf_r+0x152>
 8002620:	2340      	movs	r3, #64	; 0x40
 8002622:	eba0 000a 	sub.w	r0, r0, sl
 8002626:	fa03 f000 	lsl.w	r0, r3, r0
 800262a:	9b04      	ldr	r3, [sp, #16]
 800262c:	3401      	adds	r4, #1
 800262e:	4303      	orrs	r3, r0
 8002630:	9304      	str	r3, [sp, #16]
 8002632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002636:	2206      	movs	r2, #6
 8002638:	4826      	ldr	r0, [pc, #152]	; (80026d4 <_svfiprintf_r+0x1f4>)
 800263a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800263e:	f000 f9e5 	bl	8002a0c <memchr>
 8002642:	2800      	cmp	r0, #0
 8002644:	d038      	beq.n	80026b8 <_svfiprintf_r+0x1d8>
 8002646:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <_svfiprintf_r+0x1f8>)
 8002648:	bb1b      	cbnz	r3, 8002692 <_svfiprintf_r+0x1b2>
 800264a:	9b03      	ldr	r3, [sp, #12]
 800264c:	3307      	adds	r3, #7
 800264e:	f023 0307 	bic.w	r3, r3, #7
 8002652:	3308      	adds	r3, #8
 8002654:	9303      	str	r3, [sp, #12]
 8002656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002658:	4433      	add	r3, r6
 800265a:	9309      	str	r3, [sp, #36]	; 0x24
 800265c:	e767      	b.n	800252e <_svfiprintf_r+0x4e>
 800265e:	460c      	mov	r4, r1
 8002660:	2001      	movs	r0, #1
 8002662:	fb0c 3202 	mla	r2, ip, r2, r3
 8002666:	e7a5      	b.n	80025b4 <_svfiprintf_r+0xd4>
 8002668:	2300      	movs	r3, #0
 800266a:	f04f 0c0a 	mov.w	ip, #10
 800266e:	4619      	mov	r1, r3
 8002670:	3401      	adds	r4, #1
 8002672:	9305      	str	r3, [sp, #20]
 8002674:	4620      	mov	r0, r4
 8002676:	f810 2b01 	ldrb.w	r2, [r0], #1
 800267a:	3a30      	subs	r2, #48	; 0x30
 800267c:	2a09      	cmp	r2, #9
 800267e:	d903      	bls.n	8002688 <_svfiprintf_r+0x1a8>
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0c5      	beq.n	8002610 <_svfiprintf_r+0x130>
 8002684:	9105      	str	r1, [sp, #20]
 8002686:	e7c3      	b.n	8002610 <_svfiprintf_r+0x130>
 8002688:	4604      	mov	r4, r0
 800268a:	2301      	movs	r3, #1
 800268c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002690:	e7f0      	b.n	8002674 <_svfiprintf_r+0x194>
 8002692:	ab03      	add	r3, sp, #12
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	462a      	mov	r2, r5
 8002698:	4638      	mov	r0, r7
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <_svfiprintf_r+0x1fc>)
 800269c:	a904      	add	r1, sp, #16
 800269e:	f3af 8000 	nop.w
 80026a2:	1c42      	adds	r2, r0, #1
 80026a4:	4606      	mov	r6, r0
 80026a6:	d1d6      	bne.n	8002656 <_svfiprintf_r+0x176>
 80026a8:	89ab      	ldrh	r3, [r5, #12]
 80026aa:	065b      	lsls	r3, r3, #25
 80026ac:	f53f af2c 	bmi.w	8002508 <_svfiprintf_r+0x28>
 80026b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026b2:	b01d      	add	sp, #116	; 0x74
 80026b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026b8:	ab03      	add	r3, sp, #12
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	462a      	mov	r2, r5
 80026be:	4638      	mov	r0, r7
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <_svfiprintf_r+0x1fc>)
 80026c2:	a904      	add	r1, sp, #16
 80026c4:	f000 f87c 	bl	80027c0 <_printf_i>
 80026c8:	e7eb      	b.n	80026a2 <_svfiprintf_r+0x1c2>
 80026ca:	bf00      	nop
 80026cc:	08002d26 	.word	0x08002d26
 80026d0:	08002d2c 	.word	0x08002d2c
 80026d4:	08002d30 	.word	0x08002d30
 80026d8:	00000000 	.word	0x00000000
 80026dc:	08002429 	.word	0x08002429

080026e0 <_printf_common>:
 80026e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026e4:	4616      	mov	r6, r2
 80026e6:	4699      	mov	r9, r3
 80026e8:	688a      	ldr	r2, [r1, #8]
 80026ea:	690b      	ldr	r3, [r1, #16]
 80026ec:	4607      	mov	r7, r0
 80026ee:	4293      	cmp	r3, r2
 80026f0:	bfb8      	it	lt
 80026f2:	4613      	movlt	r3, r2
 80026f4:	6033      	str	r3, [r6, #0]
 80026f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026fa:	460c      	mov	r4, r1
 80026fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002700:	b10a      	cbz	r2, 8002706 <_printf_common+0x26>
 8002702:	3301      	adds	r3, #1
 8002704:	6033      	str	r3, [r6, #0]
 8002706:	6823      	ldr	r3, [r4, #0]
 8002708:	0699      	lsls	r1, r3, #26
 800270a:	bf42      	ittt	mi
 800270c:	6833      	ldrmi	r3, [r6, #0]
 800270e:	3302      	addmi	r3, #2
 8002710:	6033      	strmi	r3, [r6, #0]
 8002712:	6825      	ldr	r5, [r4, #0]
 8002714:	f015 0506 	ands.w	r5, r5, #6
 8002718:	d106      	bne.n	8002728 <_printf_common+0x48>
 800271a:	f104 0a19 	add.w	sl, r4, #25
 800271e:	68e3      	ldr	r3, [r4, #12]
 8002720:	6832      	ldr	r2, [r6, #0]
 8002722:	1a9b      	subs	r3, r3, r2
 8002724:	42ab      	cmp	r3, r5
 8002726:	dc28      	bgt.n	800277a <_printf_common+0x9a>
 8002728:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800272c:	1e13      	subs	r3, r2, #0
 800272e:	6822      	ldr	r2, [r4, #0]
 8002730:	bf18      	it	ne
 8002732:	2301      	movne	r3, #1
 8002734:	0692      	lsls	r2, r2, #26
 8002736:	d42d      	bmi.n	8002794 <_printf_common+0xb4>
 8002738:	4649      	mov	r1, r9
 800273a:	4638      	mov	r0, r7
 800273c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002740:	47c0      	blx	r8
 8002742:	3001      	adds	r0, #1
 8002744:	d020      	beq.n	8002788 <_printf_common+0xa8>
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	68e5      	ldr	r5, [r4, #12]
 800274a:	f003 0306 	and.w	r3, r3, #6
 800274e:	2b04      	cmp	r3, #4
 8002750:	bf18      	it	ne
 8002752:	2500      	movne	r5, #0
 8002754:	6832      	ldr	r2, [r6, #0]
 8002756:	f04f 0600 	mov.w	r6, #0
 800275a:	68a3      	ldr	r3, [r4, #8]
 800275c:	bf08      	it	eq
 800275e:	1aad      	subeq	r5, r5, r2
 8002760:	6922      	ldr	r2, [r4, #16]
 8002762:	bf08      	it	eq
 8002764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002768:	4293      	cmp	r3, r2
 800276a:	bfc4      	itt	gt
 800276c:	1a9b      	subgt	r3, r3, r2
 800276e:	18ed      	addgt	r5, r5, r3
 8002770:	341a      	adds	r4, #26
 8002772:	42b5      	cmp	r5, r6
 8002774:	d11a      	bne.n	80027ac <_printf_common+0xcc>
 8002776:	2000      	movs	r0, #0
 8002778:	e008      	b.n	800278c <_printf_common+0xac>
 800277a:	2301      	movs	r3, #1
 800277c:	4652      	mov	r2, sl
 800277e:	4649      	mov	r1, r9
 8002780:	4638      	mov	r0, r7
 8002782:	47c0      	blx	r8
 8002784:	3001      	adds	r0, #1
 8002786:	d103      	bne.n	8002790 <_printf_common+0xb0>
 8002788:	f04f 30ff 	mov.w	r0, #4294967295
 800278c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002790:	3501      	adds	r5, #1
 8002792:	e7c4      	b.n	800271e <_printf_common+0x3e>
 8002794:	2030      	movs	r0, #48	; 0x30
 8002796:	18e1      	adds	r1, r4, r3
 8002798:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80027a2:	4422      	add	r2, r4
 80027a4:	3302      	adds	r3, #2
 80027a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80027aa:	e7c5      	b.n	8002738 <_printf_common+0x58>
 80027ac:	2301      	movs	r3, #1
 80027ae:	4622      	mov	r2, r4
 80027b0:	4649      	mov	r1, r9
 80027b2:	4638      	mov	r0, r7
 80027b4:	47c0      	blx	r8
 80027b6:	3001      	adds	r0, #1
 80027b8:	d0e6      	beq.n	8002788 <_printf_common+0xa8>
 80027ba:	3601      	adds	r6, #1
 80027bc:	e7d9      	b.n	8002772 <_printf_common+0x92>
	...

080027c0 <_printf_i>:
 80027c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027c4:	7e0f      	ldrb	r7, [r1, #24]
 80027c6:	4691      	mov	r9, r2
 80027c8:	2f78      	cmp	r7, #120	; 0x78
 80027ca:	4680      	mov	r8, r0
 80027cc:	460c      	mov	r4, r1
 80027ce:	469a      	mov	sl, r3
 80027d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80027d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80027d6:	d807      	bhi.n	80027e8 <_printf_i+0x28>
 80027d8:	2f62      	cmp	r7, #98	; 0x62
 80027da:	d80a      	bhi.n	80027f2 <_printf_i+0x32>
 80027dc:	2f00      	cmp	r7, #0
 80027de:	f000 80d9 	beq.w	8002994 <_printf_i+0x1d4>
 80027e2:	2f58      	cmp	r7, #88	; 0x58
 80027e4:	f000 80a4 	beq.w	8002930 <_printf_i+0x170>
 80027e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80027f0:	e03a      	b.n	8002868 <_printf_i+0xa8>
 80027f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80027f6:	2b15      	cmp	r3, #21
 80027f8:	d8f6      	bhi.n	80027e8 <_printf_i+0x28>
 80027fa:	a101      	add	r1, pc, #4	; (adr r1, 8002800 <_printf_i+0x40>)
 80027fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002800:	08002859 	.word	0x08002859
 8002804:	0800286d 	.word	0x0800286d
 8002808:	080027e9 	.word	0x080027e9
 800280c:	080027e9 	.word	0x080027e9
 8002810:	080027e9 	.word	0x080027e9
 8002814:	080027e9 	.word	0x080027e9
 8002818:	0800286d 	.word	0x0800286d
 800281c:	080027e9 	.word	0x080027e9
 8002820:	080027e9 	.word	0x080027e9
 8002824:	080027e9 	.word	0x080027e9
 8002828:	080027e9 	.word	0x080027e9
 800282c:	0800297b 	.word	0x0800297b
 8002830:	0800289d 	.word	0x0800289d
 8002834:	0800295d 	.word	0x0800295d
 8002838:	080027e9 	.word	0x080027e9
 800283c:	080027e9 	.word	0x080027e9
 8002840:	0800299d 	.word	0x0800299d
 8002844:	080027e9 	.word	0x080027e9
 8002848:	0800289d 	.word	0x0800289d
 800284c:	080027e9 	.word	0x080027e9
 8002850:	080027e9 	.word	0x080027e9
 8002854:	08002965 	.word	0x08002965
 8002858:	682b      	ldr	r3, [r5, #0]
 800285a:	1d1a      	adds	r2, r3, #4
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	602a      	str	r2, [r5, #0]
 8002860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002864:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002868:	2301      	movs	r3, #1
 800286a:	e0a4      	b.n	80029b6 <_printf_i+0x1f6>
 800286c:	6820      	ldr	r0, [r4, #0]
 800286e:	6829      	ldr	r1, [r5, #0]
 8002870:	0606      	lsls	r6, r0, #24
 8002872:	f101 0304 	add.w	r3, r1, #4
 8002876:	d50a      	bpl.n	800288e <_printf_i+0xce>
 8002878:	680e      	ldr	r6, [r1, #0]
 800287a:	602b      	str	r3, [r5, #0]
 800287c:	2e00      	cmp	r6, #0
 800287e:	da03      	bge.n	8002888 <_printf_i+0xc8>
 8002880:	232d      	movs	r3, #45	; 0x2d
 8002882:	4276      	negs	r6, r6
 8002884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002888:	230a      	movs	r3, #10
 800288a:	485e      	ldr	r0, [pc, #376]	; (8002a04 <_printf_i+0x244>)
 800288c:	e019      	b.n	80028c2 <_printf_i+0x102>
 800288e:	680e      	ldr	r6, [r1, #0]
 8002890:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002894:	602b      	str	r3, [r5, #0]
 8002896:	bf18      	it	ne
 8002898:	b236      	sxthne	r6, r6
 800289a:	e7ef      	b.n	800287c <_printf_i+0xbc>
 800289c:	682b      	ldr	r3, [r5, #0]
 800289e:	6820      	ldr	r0, [r4, #0]
 80028a0:	1d19      	adds	r1, r3, #4
 80028a2:	6029      	str	r1, [r5, #0]
 80028a4:	0601      	lsls	r1, r0, #24
 80028a6:	d501      	bpl.n	80028ac <_printf_i+0xec>
 80028a8:	681e      	ldr	r6, [r3, #0]
 80028aa:	e002      	b.n	80028b2 <_printf_i+0xf2>
 80028ac:	0646      	lsls	r6, r0, #25
 80028ae:	d5fb      	bpl.n	80028a8 <_printf_i+0xe8>
 80028b0:	881e      	ldrh	r6, [r3, #0]
 80028b2:	2f6f      	cmp	r7, #111	; 0x6f
 80028b4:	bf0c      	ite	eq
 80028b6:	2308      	moveq	r3, #8
 80028b8:	230a      	movne	r3, #10
 80028ba:	4852      	ldr	r0, [pc, #328]	; (8002a04 <_printf_i+0x244>)
 80028bc:	2100      	movs	r1, #0
 80028be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80028c2:	6865      	ldr	r5, [r4, #4]
 80028c4:	2d00      	cmp	r5, #0
 80028c6:	bfa8      	it	ge
 80028c8:	6821      	ldrge	r1, [r4, #0]
 80028ca:	60a5      	str	r5, [r4, #8]
 80028cc:	bfa4      	itt	ge
 80028ce:	f021 0104 	bicge.w	r1, r1, #4
 80028d2:	6021      	strge	r1, [r4, #0]
 80028d4:	b90e      	cbnz	r6, 80028da <_printf_i+0x11a>
 80028d6:	2d00      	cmp	r5, #0
 80028d8:	d04d      	beq.n	8002976 <_printf_i+0x1b6>
 80028da:	4615      	mov	r5, r2
 80028dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80028e0:	fb03 6711 	mls	r7, r3, r1, r6
 80028e4:	5dc7      	ldrb	r7, [r0, r7]
 80028e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80028ea:	4637      	mov	r7, r6
 80028ec:	42bb      	cmp	r3, r7
 80028ee:	460e      	mov	r6, r1
 80028f0:	d9f4      	bls.n	80028dc <_printf_i+0x11c>
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d10b      	bne.n	800290e <_printf_i+0x14e>
 80028f6:	6823      	ldr	r3, [r4, #0]
 80028f8:	07de      	lsls	r6, r3, #31
 80028fa:	d508      	bpl.n	800290e <_printf_i+0x14e>
 80028fc:	6923      	ldr	r3, [r4, #16]
 80028fe:	6861      	ldr	r1, [r4, #4]
 8002900:	4299      	cmp	r1, r3
 8002902:	bfde      	ittt	le
 8002904:	2330      	movle	r3, #48	; 0x30
 8002906:	f805 3c01 	strble.w	r3, [r5, #-1]
 800290a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800290e:	1b52      	subs	r2, r2, r5
 8002910:	6122      	str	r2, [r4, #16]
 8002912:	464b      	mov	r3, r9
 8002914:	4621      	mov	r1, r4
 8002916:	4640      	mov	r0, r8
 8002918:	f8cd a000 	str.w	sl, [sp]
 800291c:	aa03      	add	r2, sp, #12
 800291e:	f7ff fedf 	bl	80026e0 <_printf_common>
 8002922:	3001      	adds	r0, #1
 8002924:	d14c      	bne.n	80029c0 <_printf_i+0x200>
 8002926:	f04f 30ff 	mov.w	r0, #4294967295
 800292a:	b004      	add	sp, #16
 800292c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002930:	4834      	ldr	r0, [pc, #208]	; (8002a04 <_printf_i+0x244>)
 8002932:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002936:	6829      	ldr	r1, [r5, #0]
 8002938:	6823      	ldr	r3, [r4, #0]
 800293a:	f851 6b04 	ldr.w	r6, [r1], #4
 800293e:	6029      	str	r1, [r5, #0]
 8002940:	061d      	lsls	r5, r3, #24
 8002942:	d514      	bpl.n	800296e <_printf_i+0x1ae>
 8002944:	07df      	lsls	r7, r3, #31
 8002946:	bf44      	itt	mi
 8002948:	f043 0320 	orrmi.w	r3, r3, #32
 800294c:	6023      	strmi	r3, [r4, #0]
 800294e:	b91e      	cbnz	r6, 8002958 <_printf_i+0x198>
 8002950:	6823      	ldr	r3, [r4, #0]
 8002952:	f023 0320 	bic.w	r3, r3, #32
 8002956:	6023      	str	r3, [r4, #0]
 8002958:	2310      	movs	r3, #16
 800295a:	e7af      	b.n	80028bc <_printf_i+0xfc>
 800295c:	6823      	ldr	r3, [r4, #0]
 800295e:	f043 0320 	orr.w	r3, r3, #32
 8002962:	6023      	str	r3, [r4, #0]
 8002964:	2378      	movs	r3, #120	; 0x78
 8002966:	4828      	ldr	r0, [pc, #160]	; (8002a08 <_printf_i+0x248>)
 8002968:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800296c:	e7e3      	b.n	8002936 <_printf_i+0x176>
 800296e:	0659      	lsls	r1, r3, #25
 8002970:	bf48      	it	mi
 8002972:	b2b6      	uxthmi	r6, r6
 8002974:	e7e6      	b.n	8002944 <_printf_i+0x184>
 8002976:	4615      	mov	r5, r2
 8002978:	e7bb      	b.n	80028f2 <_printf_i+0x132>
 800297a:	682b      	ldr	r3, [r5, #0]
 800297c:	6826      	ldr	r6, [r4, #0]
 800297e:	1d18      	adds	r0, r3, #4
 8002980:	6961      	ldr	r1, [r4, #20]
 8002982:	6028      	str	r0, [r5, #0]
 8002984:	0635      	lsls	r5, r6, #24
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	d501      	bpl.n	800298e <_printf_i+0x1ce>
 800298a:	6019      	str	r1, [r3, #0]
 800298c:	e002      	b.n	8002994 <_printf_i+0x1d4>
 800298e:	0670      	lsls	r0, r6, #25
 8002990:	d5fb      	bpl.n	800298a <_printf_i+0x1ca>
 8002992:	8019      	strh	r1, [r3, #0]
 8002994:	2300      	movs	r3, #0
 8002996:	4615      	mov	r5, r2
 8002998:	6123      	str	r3, [r4, #16]
 800299a:	e7ba      	b.n	8002912 <_printf_i+0x152>
 800299c:	682b      	ldr	r3, [r5, #0]
 800299e:	2100      	movs	r1, #0
 80029a0:	1d1a      	adds	r2, r3, #4
 80029a2:	602a      	str	r2, [r5, #0]
 80029a4:	681d      	ldr	r5, [r3, #0]
 80029a6:	6862      	ldr	r2, [r4, #4]
 80029a8:	4628      	mov	r0, r5
 80029aa:	f000 f82f 	bl	8002a0c <memchr>
 80029ae:	b108      	cbz	r0, 80029b4 <_printf_i+0x1f4>
 80029b0:	1b40      	subs	r0, r0, r5
 80029b2:	6060      	str	r0, [r4, #4]
 80029b4:	6863      	ldr	r3, [r4, #4]
 80029b6:	6123      	str	r3, [r4, #16]
 80029b8:	2300      	movs	r3, #0
 80029ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029be:	e7a8      	b.n	8002912 <_printf_i+0x152>
 80029c0:	462a      	mov	r2, r5
 80029c2:	4649      	mov	r1, r9
 80029c4:	4640      	mov	r0, r8
 80029c6:	6923      	ldr	r3, [r4, #16]
 80029c8:	47d0      	blx	sl
 80029ca:	3001      	adds	r0, #1
 80029cc:	d0ab      	beq.n	8002926 <_printf_i+0x166>
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	079b      	lsls	r3, r3, #30
 80029d2:	d413      	bmi.n	80029fc <_printf_i+0x23c>
 80029d4:	68e0      	ldr	r0, [r4, #12]
 80029d6:	9b03      	ldr	r3, [sp, #12]
 80029d8:	4298      	cmp	r0, r3
 80029da:	bfb8      	it	lt
 80029dc:	4618      	movlt	r0, r3
 80029de:	e7a4      	b.n	800292a <_printf_i+0x16a>
 80029e0:	2301      	movs	r3, #1
 80029e2:	4632      	mov	r2, r6
 80029e4:	4649      	mov	r1, r9
 80029e6:	4640      	mov	r0, r8
 80029e8:	47d0      	blx	sl
 80029ea:	3001      	adds	r0, #1
 80029ec:	d09b      	beq.n	8002926 <_printf_i+0x166>
 80029ee:	3501      	adds	r5, #1
 80029f0:	68e3      	ldr	r3, [r4, #12]
 80029f2:	9903      	ldr	r1, [sp, #12]
 80029f4:	1a5b      	subs	r3, r3, r1
 80029f6:	42ab      	cmp	r3, r5
 80029f8:	dcf2      	bgt.n	80029e0 <_printf_i+0x220>
 80029fa:	e7eb      	b.n	80029d4 <_printf_i+0x214>
 80029fc:	2500      	movs	r5, #0
 80029fe:	f104 0619 	add.w	r6, r4, #25
 8002a02:	e7f5      	b.n	80029f0 <_printf_i+0x230>
 8002a04:	08002d37 	.word	0x08002d37
 8002a08:	08002d48 	.word	0x08002d48

08002a0c <memchr>:
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	b510      	push	{r4, lr}
 8002a10:	b2c9      	uxtb	r1, r1
 8002a12:	4402      	add	r2, r0
 8002a14:	4293      	cmp	r3, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	d101      	bne.n	8002a1e <memchr+0x12>
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	e003      	b.n	8002a26 <memchr+0x1a>
 8002a1e:	7804      	ldrb	r4, [r0, #0]
 8002a20:	3301      	adds	r3, #1
 8002a22:	428c      	cmp	r4, r1
 8002a24:	d1f6      	bne.n	8002a14 <memchr+0x8>
 8002a26:	bd10      	pop	{r4, pc}

08002a28 <memcpy>:
 8002a28:	440a      	add	r2, r1
 8002a2a:	4291      	cmp	r1, r2
 8002a2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a30:	d100      	bne.n	8002a34 <memcpy+0xc>
 8002a32:	4770      	bx	lr
 8002a34:	b510      	push	{r4, lr}
 8002a36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a3a:	4291      	cmp	r1, r2
 8002a3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a40:	d1f9      	bne.n	8002a36 <memcpy+0xe>
 8002a42:	bd10      	pop	{r4, pc}

08002a44 <memmove>:
 8002a44:	4288      	cmp	r0, r1
 8002a46:	b510      	push	{r4, lr}
 8002a48:	eb01 0402 	add.w	r4, r1, r2
 8002a4c:	d902      	bls.n	8002a54 <memmove+0x10>
 8002a4e:	4284      	cmp	r4, r0
 8002a50:	4623      	mov	r3, r4
 8002a52:	d807      	bhi.n	8002a64 <memmove+0x20>
 8002a54:	1e43      	subs	r3, r0, #1
 8002a56:	42a1      	cmp	r1, r4
 8002a58:	d008      	beq.n	8002a6c <memmove+0x28>
 8002a5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a62:	e7f8      	b.n	8002a56 <memmove+0x12>
 8002a64:	4601      	mov	r1, r0
 8002a66:	4402      	add	r2, r0
 8002a68:	428a      	cmp	r2, r1
 8002a6a:	d100      	bne.n	8002a6e <memmove+0x2a>
 8002a6c:	bd10      	pop	{r4, pc}
 8002a6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a76:	e7f7      	b.n	8002a68 <memmove+0x24>

08002a78 <_free_r>:
 8002a78:	b538      	push	{r3, r4, r5, lr}
 8002a7a:	4605      	mov	r5, r0
 8002a7c:	2900      	cmp	r1, #0
 8002a7e:	d040      	beq.n	8002b02 <_free_r+0x8a>
 8002a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a84:	1f0c      	subs	r4, r1, #4
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bfb8      	it	lt
 8002a8a:	18e4      	addlt	r4, r4, r3
 8002a8c:	f000 f910 	bl	8002cb0 <__malloc_lock>
 8002a90:	4a1c      	ldr	r2, [pc, #112]	; (8002b04 <_free_r+0x8c>)
 8002a92:	6813      	ldr	r3, [r2, #0]
 8002a94:	b933      	cbnz	r3, 8002aa4 <_free_r+0x2c>
 8002a96:	6063      	str	r3, [r4, #4]
 8002a98:	6014      	str	r4, [r2, #0]
 8002a9a:	4628      	mov	r0, r5
 8002a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002aa0:	f000 b90c 	b.w	8002cbc <__malloc_unlock>
 8002aa4:	42a3      	cmp	r3, r4
 8002aa6:	d908      	bls.n	8002aba <_free_r+0x42>
 8002aa8:	6820      	ldr	r0, [r4, #0]
 8002aaa:	1821      	adds	r1, r4, r0
 8002aac:	428b      	cmp	r3, r1
 8002aae:	bf01      	itttt	eq
 8002ab0:	6819      	ldreq	r1, [r3, #0]
 8002ab2:	685b      	ldreq	r3, [r3, #4]
 8002ab4:	1809      	addeq	r1, r1, r0
 8002ab6:	6021      	streq	r1, [r4, #0]
 8002ab8:	e7ed      	b.n	8002a96 <_free_r+0x1e>
 8002aba:	461a      	mov	r2, r3
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	b10b      	cbz	r3, 8002ac4 <_free_r+0x4c>
 8002ac0:	42a3      	cmp	r3, r4
 8002ac2:	d9fa      	bls.n	8002aba <_free_r+0x42>
 8002ac4:	6811      	ldr	r1, [r2, #0]
 8002ac6:	1850      	adds	r0, r2, r1
 8002ac8:	42a0      	cmp	r0, r4
 8002aca:	d10b      	bne.n	8002ae4 <_free_r+0x6c>
 8002acc:	6820      	ldr	r0, [r4, #0]
 8002ace:	4401      	add	r1, r0
 8002ad0:	1850      	adds	r0, r2, r1
 8002ad2:	4283      	cmp	r3, r0
 8002ad4:	6011      	str	r1, [r2, #0]
 8002ad6:	d1e0      	bne.n	8002a9a <_free_r+0x22>
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4401      	add	r1, r0
 8002ade:	6011      	str	r1, [r2, #0]
 8002ae0:	6053      	str	r3, [r2, #4]
 8002ae2:	e7da      	b.n	8002a9a <_free_r+0x22>
 8002ae4:	d902      	bls.n	8002aec <_free_r+0x74>
 8002ae6:	230c      	movs	r3, #12
 8002ae8:	602b      	str	r3, [r5, #0]
 8002aea:	e7d6      	b.n	8002a9a <_free_r+0x22>
 8002aec:	6820      	ldr	r0, [r4, #0]
 8002aee:	1821      	adds	r1, r4, r0
 8002af0:	428b      	cmp	r3, r1
 8002af2:	bf01      	itttt	eq
 8002af4:	6819      	ldreq	r1, [r3, #0]
 8002af6:	685b      	ldreq	r3, [r3, #4]
 8002af8:	1809      	addeq	r1, r1, r0
 8002afa:	6021      	streq	r1, [r4, #0]
 8002afc:	6063      	str	r3, [r4, #4]
 8002afe:	6054      	str	r4, [r2, #4]
 8002b00:	e7cb      	b.n	8002a9a <_free_r+0x22>
 8002b02:	bd38      	pop	{r3, r4, r5, pc}
 8002b04:	20000134 	.word	0x20000134

08002b08 <sbrk_aligned>:
 8002b08:	b570      	push	{r4, r5, r6, lr}
 8002b0a:	4e0e      	ldr	r6, [pc, #56]	; (8002b44 <sbrk_aligned+0x3c>)
 8002b0c:	460c      	mov	r4, r1
 8002b0e:	6831      	ldr	r1, [r6, #0]
 8002b10:	4605      	mov	r5, r0
 8002b12:	b911      	cbnz	r1, 8002b1a <sbrk_aligned+0x12>
 8002b14:	f000 f8bc 	bl	8002c90 <_sbrk_r>
 8002b18:	6030      	str	r0, [r6, #0]
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	f000 f8b7 	bl	8002c90 <_sbrk_r>
 8002b22:	1c43      	adds	r3, r0, #1
 8002b24:	d00a      	beq.n	8002b3c <sbrk_aligned+0x34>
 8002b26:	1cc4      	adds	r4, r0, #3
 8002b28:	f024 0403 	bic.w	r4, r4, #3
 8002b2c:	42a0      	cmp	r0, r4
 8002b2e:	d007      	beq.n	8002b40 <sbrk_aligned+0x38>
 8002b30:	1a21      	subs	r1, r4, r0
 8002b32:	4628      	mov	r0, r5
 8002b34:	f000 f8ac 	bl	8002c90 <_sbrk_r>
 8002b38:	3001      	adds	r0, #1
 8002b3a:	d101      	bne.n	8002b40 <sbrk_aligned+0x38>
 8002b3c:	f04f 34ff 	mov.w	r4, #4294967295
 8002b40:	4620      	mov	r0, r4
 8002b42:	bd70      	pop	{r4, r5, r6, pc}
 8002b44:	20000138 	.word	0x20000138

08002b48 <_malloc_r>:
 8002b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b4c:	1ccd      	adds	r5, r1, #3
 8002b4e:	f025 0503 	bic.w	r5, r5, #3
 8002b52:	3508      	adds	r5, #8
 8002b54:	2d0c      	cmp	r5, #12
 8002b56:	bf38      	it	cc
 8002b58:	250c      	movcc	r5, #12
 8002b5a:	2d00      	cmp	r5, #0
 8002b5c:	4607      	mov	r7, r0
 8002b5e:	db01      	blt.n	8002b64 <_malloc_r+0x1c>
 8002b60:	42a9      	cmp	r1, r5
 8002b62:	d905      	bls.n	8002b70 <_malloc_r+0x28>
 8002b64:	230c      	movs	r3, #12
 8002b66:	2600      	movs	r6, #0
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	4630      	mov	r0, r6
 8002b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b70:	4e2e      	ldr	r6, [pc, #184]	; (8002c2c <_malloc_r+0xe4>)
 8002b72:	f000 f89d 	bl	8002cb0 <__malloc_lock>
 8002b76:	6833      	ldr	r3, [r6, #0]
 8002b78:	461c      	mov	r4, r3
 8002b7a:	bb34      	cbnz	r4, 8002bca <_malloc_r+0x82>
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	4638      	mov	r0, r7
 8002b80:	f7ff ffc2 	bl	8002b08 <sbrk_aligned>
 8002b84:	1c43      	adds	r3, r0, #1
 8002b86:	4604      	mov	r4, r0
 8002b88:	d14d      	bne.n	8002c26 <_malloc_r+0xde>
 8002b8a:	6834      	ldr	r4, [r6, #0]
 8002b8c:	4626      	mov	r6, r4
 8002b8e:	2e00      	cmp	r6, #0
 8002b90:	d140      	bne.n	8002c14 <_malloc_r+0xcc>
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	4631      	mov	r1, r6
 8002b96:	4638      	mov	r0, r7
 8002b98:	eb04 0803 	add.w	r8, r4, r3
 8002b9c:	f000 f878 	bl	8002c90 <_sbrk_r>
 8002ba0:	4580      	cmp	r8, r0
 8002ba2:	d13a      	bne.n	8002c1a <_malloc_r+0xd2>
 8002ba4:	6821      	ldr	r1, [r4, #0]
 8002ba6:	3503      	adds	r5, #3
 8002ba8:	1a6d      	subs	r5, r5, r1
 8002baa:	f025 0503 	bic.w	r5, r5, #3
 8002bae:	3508      	adds	r5, #8
 8002bb0:	2d0c      	cmp	r5, #12
 8002bb2:	bf38      	it	cc
 8002bb4:	250c      	movcc	r5, #12
 8002bb6:	4638      	mov	r0, r7
 8002bb8:	4629      	mov	r1, r5
 8002bba:	f7ff ffa5 	bl	8002b08 <sbrk_aligned>
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	d02b      	beq.n	8002c1a <_malloc_r+0xd2>
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	442b      	add	r3, r5
 8002bc6:	6023      	str	r3, [r4, #0]
 8002bc8:	e00e      	b.n	8002be8 <_malloc_r+0xa0>
 8002bca:	6822      	ldr	r2, [r4, #0]
 8002bcc:	1b52      	subs	r2, r2, r5
 8002bce:	d41e      	bmi.n	8002c0e <_malloc_r+0xc6>
 8002bd0:	2a0b      	cmp	r2, #11
 8002bd2:	d916      	bls.n	8002c02 <_malloc_r+0xba>
 8002bd4:	1961      	adds	r1, r4, r5
 8002bd6:	42a3      	cmp	r3, r4
 8002bd8:	6025      	str	r5, [r4, #0]
 8002bda:	bf18      	it	ne
 8002bdc:	6059      	strne	r1, [r3, #4]
 8002bde:	6863      	ldr	r3, [r4, #4]
 8002be0:	bf08      	it	eq
 8002be2:	6031      	streq	r1, [r6, #0]
 8002be4:	5162      	str	r2, [r4, r5]
 8002be6:	604b      	str	r3, [r1, #4]
 8002be8:	4638      	mov	r0, r7
 8002bea:	f104 060b 	add.w	r6, r4, #11
 8002bee:	f000 f865 	bl	8002cbc <__malloc_unlock>
 8002bf2:	f026 0607 	bic.w	r6, r6, #7
 8002bf6:	1d23      	adds	r3, r4, #4
 8002bf8:	1af2      	subs	r2, r6, r3
 8002bfa:	d0b6      	beq.n	8002b6a <_malloc_r+0x22>
 8002bfc:	1b9b      	subs	r3, r3, r6
 8002bfe:	50a3      	str	r3, [r4, r2]
 8002c00:	e7b3      	b.n	8002b6a <_malloc_r+0x22>
 8002c02:	6862      	ldr	r2, [r4, #4]
 8002c04:	42a3      	cmp	r3, r4
 8002c06:	bf0c      	ite	eq
 8002c08:	6032      	streq	r2, [r6, #0]
 8002c0a:	605a      	strne	r2, [r3, #4]
 8002c0c:	e7ec      	b.n	8002be8 <_malloc_r+0xa0>
 8002c0e:	4623      	mov	r3, r4
 8002c10:	6864      	ldr	r4, [r4, #4]
 8002c12:	e7b2      	b.n	8002b7a <_malloc_r+0x32>
 8002c14:	4634      	mov	r4, r6
 8002c16:	6876      	ldr	r6, [r6, #4]
 8002c18:	e7b9      	b.n	8002b8e <_malloc_r+0x46>
 8002c1a:	230c      	movs	r3, #12
 8002c1c:	4638      	mov	r0, r7
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	f000 f84c 	bl	8002cbc <__malloc_unlock>
 8002c24:	e7a1      	b.n	8002b6a <_malloc_r+0x22>
 8002c26:	6025      	str	r5, [r4, #0]
 8002c28:	e7de      	b.n	8002be8 <_malloc_r+0xa0>
 8002c2a:	bf00      	nop
 8002c2c:	20000134 	.word	0x20000134

08002c30 <_realloc_r>:
 8002c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c34:	4680      	mov	r8, r0
 8002c36:	4614      	mov	r4, r2
 8002c38:	460e      	mov	r6, r1
 8002c3a:	b921      	cbnz	r1, 8002c46 <_realloc_r+0x16>
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c42:	f7ff bf81 	b.w	8002b48 <_malloc_r>
 8002c46:	b92a      	cbnz	r2, 8002c54 <_realloc_r+0x24>
 8002c48:	f7ff ff16 	bl	8002a78 <_free_r>
 8002c4c:	4625      	mov	r5, r4
 8002c4e:	4628      	mov	r0, r5
 8002c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c54:	f000 f838 	bl	8002cc8 <_malloc_usable_size_r>
 8002c58:	4284      	cmp	r4, r0
 8002c5a:	4607      	mov	r7, r0
 8002c5c:	d802      	bhi.n	8002c64 <_realloc_r+0x34>
 8002c5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002c62:	d812      	bhi.n	8002c8a <_realloc_r+0x5a>
 8002c64:	4621      	mov	r1, r4
 8002c66:	4640      	mov	r0, r8
 8002c68:	f7ff ff6e 	bl	8002b48 <_malloc_r>
 8002c6c:	4605      	mov	r5, r0
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d0ed      	beq.n	8002c4e <_realloc_r+0x1e>
 8002c72:	42bc      	cmp	r4, r7
 8002c74:	4622      	mov	r2, r4
 8002c76:	4631      	mov	r1, r6
 8002c78:	bf28      	it	cs
 8002c7a:	463a      	movcs	r2, r7
 8002c7c:	f7ff fed4 	bl	8002a28 <memcpy>
 8002c80:	4631      	mov	r1, r6
 8002c82:	4640      	mov	r0, r8
 8002c84:	f7ff fef8 	bl	8002a78 <_free_r>
 8002c88:	e7e1      	b.n	8002c4e <_realloc_r+0x1e>
 8002c8a:	4635      	mov	r5, r6
 8002c8c:	e7df      	b.n	8002c4e <_realloc_r+0x1e>
	...

08002c90 <_sbrk_r>:
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	2300      	movs	r3, #0
 8002c94:	4d05      	ldr	r5, [pc, #20]	; (8002cac <_sbrk_r+0x1c>)
 8002c96:	4604      	mov	r4, r0
 8002c98:	4608      	mov	r0, r1
 8002c9a:	602b      	str	r3, [r5, #0]
 8002c9c:	f7fd fc7a 	bl	8000594 <_sbrk>
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	d102      	bne.n	8002caa <_sbrk_r+0x1a>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	b103      	cbz	r3, 8002caa <_sbrk_r+0x1a>
 8002ca8:	6023      	str	r3, [r4, #0]
 8002caa:	bd38      	pop	{r3, r4, r5, pc}
 8002cac:	2000013c 	.word	0x2000013c

08002cb0 <__malloc_lock>:
 8002cb0:	4801      	ldr	r0, [pc, #4]	; (8002cb8 <__malloc_lock+0x8>)
 8002cb2:	f000 b811 	b.w	8002cd8 <__retarget_lock_acquire_recursive>
 8002cb6:	bf00      	nop
 8002cb8:	20000140 	.word	0x20000140

08002cbc <__malloc_unlock>:
 8002cbc:	4801      	ldr	r0, [pc, #4]	; (8002cc4 <__malloc_unlock+0x8>)
 8002cbe:	f000 b80c 	b.w	8002cda <__retarget_lock_release_recursive>
 8002cc2:	bf00      	nop
 8002cc4:	20000140 	.word	0x20000140

08002cc8 <_malloc_usable_size_r>:
 8002cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ccc:	1f18      	subs	r0, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bfbc      	itt	lt
 8002cd2:	580b      	ldrlt	r3, [r1, r0]
 8002cd4:	18c0      	addlt	r0, r0, r3
 8002cd6:	4770      	bx	lr

08002cd8 <__retarget_lock_acquire_recursive>:
 8002cd8:	4770      	bx	lr

08002cda <__retarget_lock_release_recursive>:
 8002cda:	4770      	bx	lr

08002cdc <_init>:
 8002cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cde:	bf00      	nop
 8002ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce2:	bc08      	pop	{r3}
 8002ce4:	469e      	mov	lr, r3
 8002ce6:	4770      	bx	lr

08002ce8 <_fini>:
 8002ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cea:	bf00      	nop
 8002cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cee:	bc08      	pop	{r3}
 8002cf0:	469e      	mov	lr, r3
 8002cf2:	4770      	bx	lr
